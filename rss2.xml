<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>与我常在</title>
    <link>https://rubychen0611.github.io/</link>
    
    <atom:link href="https://rubychen0611.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>自爱兼爱，善感而不多愁。</description>
    <pubDate>Fri, 04 Sep 2020 08:36:52 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>《人生的智慧》摘抄（不断更新）</title>
      <link>https://rubychen0611.github.io/2020/09/03/%E4%BA%BA%E7%94%9F%E7%9A%84%E6%99%BA%E6%85%A7/</link>
      <guid>https://rubychen0611.github.io/2020/09/03/%E4%BA%BA%E7%94%9F%E7%9A%84%E6%99%BA%E6%85%A7/</guid>
      <pubDate>Thu, 03 Sep 2020 14:43:54 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;code&gt;摆在书架上很久的书，心血来潮拿下来觉得该读一读了。这本书与“幸福论”有关，教导人们如何尽量称心、愉快地度过一生这样一门艺术。在此摘抄下一些觉得有道理的句子，以备将来不时之需。&lt;/code&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><code>摆在书架上很久的书，心血来潮拿下来觉得该读一读了。这本书与“幸福论”有关，教导人们如何尽量称心、愉快地度过一生这样一门艺术。在此摘抄下一些觉得有道理的句子，以备将来不时之需。</code><a id="more"></a></p><h2 id="第1章-基本的划分"><a href="#第1章-基本的划分" class="headerlink" title="第1章 基本的划分"></a>第1章 基本的划分</h2><p>我认为决定凡人命运的根本差别在于三项内容，它们是：<br> （1）人的自身，即在最广泛意义上属于人的个性的东西。因此，“人的自身”包括健康、力量、外貌、气质、道德品格、精神智力及其潜在发展。<br> （2）人所拥有的身外之物，亦即财产和所有意义上的占有物。<br> （3）人向其他人所展示的样子，众所周知的就是人在其他人眼中所呈现的样子，亦即人们对它的看法。他人的看法又可分为名誉、地位和名声。</p><hr><p>每一个人到底生活在何样的世界，首先取决于这个人对这个世界的理解，这因个人头脑的差异而相应不同：是贫瘠的、浅薄的和肤浅的，抑或是丰富多彩、趣味盎然和充满意义的。例如，不少人羡慕他人在生活中发现和经历饶有趣味的事情，其实他们应该羡慕后者理解事物的禀赋才对，因为正是因为由于理解事物的禀赋，他们经历过的事情，在其描绘中才是那样耐人寻味。这是因为在一个思想丰富的人看来是意味深长的事情，由一个头脑肤浅、平庸的人理解的话，那不过是平凡世界里乏味的一幕而已。</p><hr><p>每个人都囿于自己的意识，正如每个人都囿于自己的皮囊，并且只是直接活在自己的意识之中。</p><hr><p>苏格拉底在看到摆卖的奢侈品时，说道：我不需要的东西，可真不少啊！</p><h2 id="第2章-人的自身"><a href="#第2章-人的自身" class="headerlink" title="第2章 人的自身"></a>第2章 人的自身</h2><h3 id="关于愉快心情"><a href="#关于愉快心情" class="headerlink" title="关于愉快心情"></a>关于愉快心情</h3><p>当愉快心情到来之时，我们应该敞开大门欢迎，因为它的到来永远不会不合时宜。</p><hr><p>高兴的心情直接使我们获益。它才是幸福的现金，而其他别的都只是兑现幸福的支票，因为高兴的心情在当下直接给人以愉快。所以，对于我们的生存，它是一种无与伦比的恩物，因为我们生存的真实性就体现在无法割裂的此时此刻，连接着两段无尽的时间。据此，我们应把获得和促进愉快的心情放在各种追求的首位。</p><hr><p>只需泛泛浏览一下生活，就可知道：人类幸福的两个死敌就是痛苦和无聊。还有我们成功远离了上述其中一个死敌的时候，也就在同等程度上接近了另一个死敌，反之亦然。这样，我们的生活确实就是在这两者之间或强或弱地摇摆。这是因为痛苦和无聊是处于双重的对立关系。一重是外在的，或说客体的；另一重是内在的，或说主体的。也就是说，外在的一重对立关系就是生活的艰辛和匮乏造成了痛苦，而丰裕和安定就产生了无聊。</p><h3 id="关于无聊和空虚"><a href="#关于无聊和空虚" class="headerlink" title="关于无聊和空虚"></a>关于无聊和空虚</h3><p><code>以前就听陈铭老师说过这句话，没想到出处是这里。</code></p><p><img src="/2020/09/03/%E4%BA%BA%E7%94%9F%E7%9A%84%E6%99%BA%E6%85%A7/1.jpg" alt="1" style="zoom:30%;"></p><p>内在空虚就是无聊的真正根源，这种人无时无刻不在向外面寻求刺激，试图借助某事某物使他们的精神和情绪活动起来。…能让我们免于这种痛苦的可靠手段，莫过于拥有丰富的内在，即丰富的精神思想。因为人的精神思想财富越优越和显著，留给无聊的空间就越小。这些人头脑里面的思想活泼，奔涌不息，不断更新；这些人玩味和摸索着内在世界和外部世界的多种现象；还有把这些思想进行各种组合的冲动和能力——所有这些，除了精神松弛下来的个别时候，都使卓越的头脑远离了无聊。但在另一方面，突出的智力以敏锐的感觉为直接前提，以激烈的意欲，亦即强烈的冲动和激情为根基。这些素质结合在一起极大地提高了情感的强烈程度，提高了对精神痛苦，甚至肉体痛苦的敏感性。对任何不如意的事情，甚至细微的骚动，都会感到更加不耐烦。</p><hr><p>一个人的自身拥有越丰富，他对身外之物的需求也就越少，别人对他来说就越不重要。所以，卓越的精神思想会导致一个人不喜与他人交往。…在独处的时候，每个人都返回到自身，这个人的自身拥有就会暴露无遗。</p><hr><p>愚蠢的人饱受无聊之苦。——塞内加</p><hr><p>我们大致上可以发现：一个人对与人交往的热衷程度，与他贫乏的思想和总体的平庸成正比。人们在这个世界上要么选择独处，要么选择庸俗，除此之外，再没有更多别的选择了。</p><h3 id="关于闲暇"><a href="#关于闲暇" class="headerlink" title="关于闲暇"></a>关于闲暇</h3><p>人们辛苦挣来的闲暇，就是人的一生的果实和收获，因为这闲暇让人能够自由地享受自己的意识和个性所带来的乐趣。除此闲暇以外，人的整个一生就只是辛苦和劳作而已。但闲暇给大多数人带来了什么呢？如果不是声色享受和胡闹，就是无聊和浑噩。人们消磨闲暇的方式显示出闲暇对于他们是何等的没有价值。他们的闲暇也就是阿里奥斯托所说的“一无所知者的无聊“。常人考虑的只是如何去打发时间，而略具才华的人却考虑如何利用时间。头脑思想狭隘的人容易受到无聊的侵袭，其原因就是他们的智力纯粹服务于他们的意欲，是发现动因的手段。</p><hr><p>归根到底，每个人都孑然独立，最关键的就是他到底是个什么样的人。</p><hr><p>幸福属于那些自得其乐的人。——亚里士多德</p><p>这是因为幸福和快乐的外在于安全，就其本质而言，都是机器不保险、不确定、为时短暂和受制于偶然的。因此，甚至在形势大好的情况下，这些外在源泉仍会轻易终结。的确，只要这些外在源泉不在我们的控制之下，这种情形就是不可避免的。</p><hr><p>我们这个世界乏善可陈，到处充斥着匮乏和痛苦，对于那些侥幸逃过匮乏和痛苦的人们来说，无聊却正在每个角落等待着它们。</p><hr><p>生活在这样一个世界里，一个拥有丰富内在的人，就像在冬月的晚上，在漫天冰雪当中拥有一间明亮、温暖、愉快的圣诞小屋。因此，能够拥有了优越、丰富的个性，尤其是深邃的精神思想，无疑是在这地球上得到的最大幸运。</p><h3 id="关于精神生活"><a href="#关于精神生活" class="headerlink" title="关于精神生活"></a>关于精神生活</h3><p>一般来说，每个无事可做的人都会根据自己的强项能力而挑选一种能够运用此能力的消遣。</p><hr><p>每个人都会根据自己身上所突出的或这或那的能力而选择相应的异类快乐。第一类是机体新陈代谢能力所带来的快乐。第二类是发挥肌肉力量所带来的快乐。第三类为施展感觉能力方面的快乐。…</p><p>感觉能力比人的另外两种生理能力更为优越，因为人在感觉方面的明显优势就是人优胜于动物之处，而人的另外两种生理基本能力在动物身上也同样存在，甚至超过人类。感觉能力隶属于人的认知能力，因此，卓越的感觉力使我们有能力享受到属于认知的，亦即所谓精神思想上的快乐。</p><hr><p>一个具有思想天赋的人除了个人生活之外，还过着另一种精神的生活，精神的生活逐渐成为了他的唯一目标，而个人生活只是实现自己目标的一种手段而已。但对于芸芸众生来说，只有这一浅薄、空虚和充满烦恼的存在才必须是生活的目标。精神卓越的人首要关注的是精神生活。随着他们对事物的洞察和认识持续地加深和增长，他们的精神生活获得了某种连贯性和持续提升，越来越完整和完美，就像一件逐步变得完美的艺术品。与这种精神生活相比，那种纯粹以追求个人自身安逸为目标的实际生活则显得可悲——这种生活增加的只是长度而不是深度。正如我已经说过的，这种现实生活对于大众就是目的，但对于精神卓越者而言，那只是手段而已。</p><hr><p>孤身独处正是他们求之不得的，闲暇则是至高的礼物，其他的别的一切好处都是可有可无的。</p><hr><p>虽然如此，我们却要考虑到一个具有优异思想禀赋的人由于头脑超常的神经活动，对形形色色的痛苦的感受力大大加强了。另外，他拥有这些思想禀赋的前提条件，亦即那激烈的气质，以及与此密不可分的头脑中那些更加生动、更加完美的表象，都会让透过这些表象而刺激起来的激动情绪更增加了烈度。总的来说，这些激动情绪是痛苦多于愉快。最后就是巨大的精神思想禀赋使拥有这些禀赋的人疏远了其他人及其追求。因为自身的拥有越丰富，他在别人身上所能发现得到的就越少。其他人引以为乐的、花样繁多的事情，在他眼里既乏味又浅薄。</p><h3 id="菲利斯特人"><a href="#菲利斯特人" class="headerlink" title="菲利斯特人"></a>菲利斯特人</h3><p>在这里，我们不会不提及这样一类人：由于仅仅具备了常规的、有限的智力配给，所以，他们并没有精神思想上的需求，他们也就是德语里所说的“菲利斯特人”。…菲利斯特人就是一个没有精神需求的人。</p><hr><p>对这种人来说，真正的快乐只能是感官上的快乐，他们就通过这些补偿自己。</p><hr><p>在与他人的交往中，他们会寻求那些能满足自己生理上的需要，而不是精神上的需求的人。因此，在他们对别人的诸多要求中，最不重要的就是别人必须具备一定的头脑思想。</p><hr><p>菲利斯特人的巨大痛苦就是在于任何观念性的东西都无法带给他们愉快。为了逃避无聊，他们不断需要现实性的东西。但由于现实性的东西一来很快就会被穷尽，一旦这样，它们不但不再提供快乐，反而会使人厌烦；二来还会带来各种祸殃。相比较而言，观念性的东西却是不可穷尽的，它们本身既无邪也乌海。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      
      <category domain="https://rubychen0611.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/">读书笔记</category>
      
      
      <category domain="https://rubychen0611.github.io/tags/%E5%8F%94%E6%9C%AC%E5%8D%8E/">叔本华</category>
      
      
      <comments>https://rubychen0611.github.io/2020/09/03/%E4%BA%BA%E7%94%9F%E7%9A%84%E6%99%BA%E6%85%A7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【论文笔记】Towards Improved Testing For Deep Learning</title>
      <link>https://rubychen0611.github.io/2020/08/26/Towards-Improved-Testing-For-Deep-Learning/</link>
      <guid>https://rubychen0611.github.io/2020/08/26/Towards-Improved-Testing-For-Deep-Learning/</guid>
      <pubDate>Wed, 26 Aug 2020 08:41:16 GMT</pubDate>
      
      <description>&lt;p&gt;原文：Towards Improved Testing For Deep Learning（ICSE-NIER’19）&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>原文：Towards Improved Testing For Deep Learning（ICSE-NIER’19）<a id="more"></a></p><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>提出了一种2-路覆盖标准：每个神经元单独对下一层神经元值的条件影响以及上一层中神经元值的组合对下一层神经元值的影响。</p><h2 id="当前领域的提升空间"><a href="#当前领域的提升空间" class="headerlink" title="当前领域的提升空间"></a>当前领域的提升空间</h2><h3 id="目前覆盖方法的局限性"><a href="#目前覆盖方法的局限性" class="headerlink" title="目前覆盖方法的局限性"></a>目前覆盖方法的局限性</h3><ul><li>DeepXplore：神经元覆盖率粗糙、不充分</li><li>DeepCover：DeepCover的覆盖标准考虑了DNN相邻层中的条件判定依赖性。该方法除了时在相对较小的网络上测试之外，它的前提条件还要求DNN是前馈全连接的神经网络。而且它不能推广到诸如RNN、LSTM、attention网络等的架构。DeepCover不考虑神经元在其所在层的环境，即同一层中神经元输出的组合。</li><li>DeepCT：DeepCT的组合测试是启发于覆盖标准：根据每层激活的神经元比值描述测试输入所使用的逻辑比值。它没有考虑DNN中的层级之间的关系，并且也没有被证实可以扩展到具有不同类型层的、能用于真实世界的DNN</li></ul><h3 id="目前测试输入生成方法的局限性"><a href="#目前测试输入生成方法的局限性" class="headerlink" title="目前测试输入生成方法的局限性"></a>目前测试输入生成方法的局限性</h3><p>测试输入可以通过指导方式生成或选择得到，它通常有两个主要目标：最大化未覆盖故障的数量，并最大化覆盖范围。 目前测试输入生成方法存在一些主要缺点：</p><ul><li>修改现有测试输入直到找到满足标准的测试输入的迭代过程单次执行耗时长。</li><li>与总的测试和生成的输入数量相比，那些能够导致覆盖范围和/或发现的角落案例增加的测试输入数量相当低。</li></ul><h3 id="Oracle选择方面的局限性"><a href="#Oracle选择方面的局限性" class="headerlink" title="Oracle选择方面的局限性"></a>Oracle选择方面的局限性</h3><ul><li>最直接的方法是收集尽可能多的实际数据并手动标记以检查其是否正确。但是，这样的过程需要大量的手动工作。</li><li>在某些工作中，会使用同一任务的多个实现作为oracle，并将其中的的差异行为标记为角落案例行为。然而，我们观察到这种方法会错误地将某些角落情况分类为正确的行为，此外，此方法仅在具有多个高精度且相似的实现的应用程序中有效。</li></ul><h2 id="本文方法"><a href="#本文方法" class="headerlink" title="本文方法"></a>本文方法</h2><p>在本文中，作者基于对内部决策逻辑的覆盖提出了一个包含两个因子的覆盖标准:  DNN中的每个三元组$(n_{i,k-1}, n_{j,k-1}, n_{q,k})$的组合覆盖情况</p><font color="red">（覆盖率居然没有形式化定义？？）</font><p>解释：</p><ul><li>每个神经元单独对下一层神经元值的条件影响<ul><li>受MC/DC启发</li></ul></li><li>上一层中神经元值的组合对下一层神经元值的影响<ul><li>受组合测试启发</li></ul></li></ul><p>对于一个初始测试输入的结果，我们通过联合优化来实现指导测试输入的生成。任何没有达到100%覆盖率的三元组被随机选择，以确定哪些激活值的组合没有被覆盖。比如若对一个DNN三元组激活实例：$n_{i,k-1}$激活, $n_{j,k-1}$不激活，$n_{q,k}$激活，优化目标为：（直接将三者相加）</p><p>$ F_{n,t}=f_{n_{i,k-1}}(t)+f_{n_{j,k-1}}(t)+f_{n_{q,k}}(t) $ </p><p>通过这种迭代修改输入的方式最大化目标函数，以达到期望的三元组某种激活状态，从而覆盖三元组不同的激活状态，达到100%覆盖。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ul><li>数据集和模型：MNIST上的三个DNN——LeNet-1，LeNet-4和LeNet-5</li><li>覆盖指标：<ul><li>10个随机测试输入获得的覆盖率（理想情况下应该很低）</li><li>边角案例数与总测试输入数的比率</li></ul></li><li><p>借鉴DeepXplore，我们使用<strong>多种实现</strong>作为oracle，只有一种图像处理——<strong>亮度</strong>。</p></li><li><p>实验结果</p><ul><li><p>结果显示，前面工作在相同的指标下获得了更高的覆盖率和对比值，而使用作者提出的标准时覆盖率直线下降，体现出作者提出的标准较于先前工作粒度更细。</p><p><img src="/2020/08/26/Towards-Improved-Testing-For-Deep-Learning/Fig1.png" alt="Fig1" style="zoom:60%;"></p></li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/ChapterZ/article/details/96116870">https://blog.csdn.net/ChapterZ/article/details/96116870</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      
      <category domain="https://rubychen0611.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/">论文笔记</category>
      
      
      <category domain="https://rubychen0611.github.io/tags/DNN%E6%B5%8B%E8%AF%95/">DNN测试</category>
      
      <category domain="https://rubychen0611.github.io/tags/%E6%B5%8B%E8%AF%95%E6%A0%87%E5%87%86/">测试标准</category>
      
      
      <comments>https://rubychen0611.github.io/2020/08/26/Towards-Improved-Testing-For-Deep-Learning/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【论文笔记】DeepGauge</title>
      <link>https://rubychen0611.github.io/2020/08/26/DeepGauge/</link>
      <guid>https://rubychen0611.github.io/2020/08/26/DeepGauge/</guid>
      <pubDate>Wed, 26 Aug 2020 01:44:37 GMT</pubDate>
      
      <description>&lt;p&gt;原文：DeepGauge: Multi-Granularity Testing Criteria for Deep Learning Systems （ASE’18）&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>原文：DeepGauge: Multi-Granularity Testing Criteria for Deep Learning Systems （ASE’18）<a id="more"></a></p><p>介绍网址：<a href="https://deepgauge.github.io/">https://deepgauge.github.io/</a></p><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>提出基于深度神经网络的主功能区、边界区、层级三类覆盖率标准。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>$\phi (x,n)$：输入$x$在神经元$n$上的输出值</p><h3 id="神经元级别的覆盖率"><a href="#神经元级别的覆盖率" class="headerlink" title="神经元级别的覆盖率"></a>神经元级别的覆盖率</h3><ul><li><p><strong>K-multisection Neuron Coverage (KMNC)</strong></p><ul><li><p>主功能区：设一个神经元$n$在训练集的下界为$low_n$，上界为$high_n$，主功能区为$[low_n,high_n]$</p></li><li><p>将主功能区$[low_n,high_n]$均分为$k$等份，每份为$S_i^n$，则该神经元在测试集$T$上的覆盖率：</p><script type="math/tex; mode=display">\frac{ \left\{ S_{i}^{n}| \exists x \in T: \phi (x,n) \in S_{i}^{n} \right\} )}{k}</script></li><li><p>对所有神经元，KMNC定义为：（即所有神经元取平均）</p><p>$ KMNCov(T,k)= \frac{ \sum _{n \in N}| \left\{ S_{i}^{n}| \exists x \in T: \phi (x,n) \in S_{i}^{n} \right\} |}{k \times |N|}$ </p></li></ul></li><li><p><strong>Neuron Boundary Coverage（NBC）</strong></p><ul><li><p>边界区：$ (- \infty , low_n) \cup (high_n,+ \infty ) $ </p></li><li><p>NBC定义为所有神经元边缘被覆盖的比例：</p><script type="math/tex; mode=display">NBCov(T)= \frac{|UpperCornerNeuron|+|LowerCornerNeuron| }{2 \times |N|}</script></li></ul></li><li><p><strong>Strong Neuron Activation Coverage (SNAC)</strong></p><ul><li><p>这些极度活跃的神经元可能在神经网络中传递有用的学习模式</p></li><li><p>SNAC只计算上边界覆盖率：</p><script type="math/tex; mode=display">SNACov(T)= \frac{|UpperCornerNeuron|}{|N|}</script></li></ul></li></ul><h3 id="层级别的覆盖率"><a href="#层级别的覆盖率" class="headerlink" title="层级别的覆盖率"></a>层级别的覆盖率</h3><ul><li><p><strong>Top-k Neuron Coverage (TKNC)</strong></p><ul><li><p>表示所有神经元中有多少曾经做过top-k（存在某个$x$使得其激活值在该层属于top-k）</p><p>$ TKNCov(T,k)= \frac{|U_{x \in T}(U_{1 \leqslant i \leqslant 1}top_{k}(x,i))|}{|N|} $ </p></li></ul></li><li><p><strong>Top-k Neuron Patterns</strong></p><ul><li><p>给定一个测试输入$x$，每一层的top-k神经元序列也形成一个模式:</p><script type="math/tex; mode=display">TKNPat(T,k)=| \left\{ (top_{k}(x,1), \ldots ,top_{k}(x,l))|x \in T \right\} |</script></li></ul></li></ul><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h3><ul><li>数据集和模型</li></ul><p><img src="/2020/08/26/DeepGauge/1.png" alt="1" style="zoom:80%;"></p><ul><li><p>对抗样本生成算法</p><ul><li>FGSM、BIM、JSMA、CW</li></ul></li><li><p>实验步骤</p><ul><li><p>对于MNIST：</p><ul><li><p>对于每个模型，生成10000张对抗样本和原10000张测试集图片混合在一起</p></li><li><p>参数设置</p><ul><li>$\sigma$:方差</li></ul><p><img src="/2020/08/26/DeepGauge/2.png" alt="2" style="zoom:80%;"></p></li><li><p>总共：3 (models)×5 (datasets)×14 (criterion settings) = 210 evaluation configurations</p></li></ul></li><li><p>对于ImageNet：</p><ul><li>随机选择5000张测试图片</li><li>总共：2 (models)×4 (datasets)×14 (criterion settings) = 112 experimental configurations<ul><li>（JSMA因为开销问题无法运行，dataset少一个）</li></ul></li></ul></li></ul></li></ul><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><ul><li>覆盖率的增加表明对抗样本测试数据总体上探索了新的DNNs的内部状态，其中一些未被原始测试覆盖。</li><li>主功能区和边界区均可能出错</li><li>覆盖率提升意味着错误检测能力提升</li><li>测试数据更多覆盖主功能区域</li><li>低边界区比高边界区更难覆盖</li></ul><h3 id="与神经元覆盖率（NC）比较"><a href="#与神经元覆盖率（NC）比较" class="headerlink" title="与神经元覆盖率（NC）比较"></a>与神经元覆盖率（NC）比较</h3><ul><li>NC难以捕捉对抗样本和原测试集样本的区别</li><li>NC使用<strong>相同的阈值</strong>作为所有神经元的激活评价。但是，我们发现不同神经元的输出统计分布差异很大。给定一个用于分析的测试套件，一些神经元的输出可能表现出相当小的方差，但平均值很大，而另一些神经元可能表现出很大的方差，但平均值很低。<br>因此，对所有神经元使用相同的阈值而不考虑神经元功能分布的差异会大大降低精度。例如，给定一个具有非常小的平均值和标准偏差的神经元，即使用户指定的阈值稍微大一点，通常也会确定该神经元不能被覆盖。</li><li>NC对神经元取值进行了<strong>标准化（归约到[0,1])</strong>，所以相同的激活值在不同数据集代表了不同的意义（因为每个数据集的max和min不同）。</li></ul><p><img src="/2020/08/26/DeepGauge/3.png" alt="3" style="zoom:80%;"></p><h2 id="可控制变量及参数"><a href="#可控制变量及参数" class="headerlink" title="可控制变量及参数"></a>可控制变量及参数</h2><ul><li>KMNC和TKNC的$k$</li><li>NBC和SNAC可选增加参数$\sigma$(在分析过程中神经元输出的标准方差)</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      
      <category domain="https://rubychen0611.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/">论文笔记</category>
      
      
      <category domain="https://rubychen0611.github.io/tags/DNN%E6%B5%8B%E8%AF%95/">DNN测试</category>
      
      <category domain="https://rubychen0611.github.io/tags/%E6%B5%8B%E8%AF%95%E6%A0%87%E5%87%86/">测试标准</category>
      
      
      <comments>https://rubychen0611.github.io/2020/08/26/DeepGauge/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【论文笔记】Surprise Adequacy</title>
      <link>https://rubychen0611.github.io/2020/08/25/Surprise-Adequacy/</link>
      <guid>https://rubychen0611.github.io/2020/08/25/Surprise-Adequacy/</guid>
      <pubDate>Tue, 25 Aug 2020 01:27:28 GMT</pubDate>
      
      <description>&lt;p&gt;原文：Guiding Deep Learning System Testing using Surprise Adequacy (ICSE‘19)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>原文：Guiding Deep Learning System Testing using Surprise Adequacy (ICSE‘19)  <a id="more"></a></p><p>代码地址：<a href="https://github.com/coinse/sadl">https://github.com/coinse/sadl</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>提出了一个叫Surprise Adequacy的指标，对一个给定的测试用例，基于可能性或距离来衡量其激活模式相对于DNN训练集的新颖程度。实验部分较详细。</p><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>已有的覆盖方法：</p><ul><li>无法针对<strong>单个</strong>输入提供信息：比如更高神经元覆盖率的输入是否比更低的好？</li><li>评估的重点是显示对抗样本和提出的标准之间的相关性，而不是评估和指导它们<strong>在实际测试DL系统时的使用</strong>。</li></ul><p>直观地说，DL系统的一个好的测试输入集应该是系统多样化的，包括从类似于训练数据的输入、到明显不同和对抗的输入。在单个样本的粒度上，SADL测量输入对于训练系统的数据对DL系统的惊讶程度:</p><ul><li>基于系统看到类似的输入的可能性在训练</li><li>或基于神经元激活向量之间的距离</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>设神经元集合为$N$，训练集为$T$，两种方式衡量测试输入$x$与训练集神经元激活向量$A_N(T)$之间的相似程度</p><h3 id="基于可能性的SA（LSA）"><a href="#基于可能性的SA（LSA）" class="headerlink" title="基于可能性的SA（LSA）"></a>基于可能性的SA（LSA）</h3><p>采用核密度估计（KDE）来获得输入数据的分布密度函数，这里使用高斯核函数</p><p>在这种方法的时候,为了减少计算量,有如下两种规则</p><ul><li><p>只选定特定的某层</p></li><li><p>方差过滤：过滤掉那些激活值的方差小于预先定义的阈值$t$的神经元</p></li></ul><p>密度函数定义：</p><script type="math/tex; mode=display">\widehat{f}(x)= \frac{1}{|A_{N_L}(T)|} \sum _{x_{i} \in T}K_{H}( \alpha _{N_{L}}(x)- \alpha _{N_{L}}(x_{i}))</script><p>公式的直观理解：对于所有的训练集中的用例，每个用例使用高斯核函数计算该用例与新输入x的激活迹的差值。概率密度低说明输入更加稀有，概率密度高说明输入更加相似。</p><p>LSA定义：</p><script type="math/tex; mode=display">LSA(x)=- \log ( \widehat{f}(x))</script><p>实际应用中只使用类别$c$的训练集数据$T_c$计算LSA。</p><h3 id="基于距离的SA（DSA）"><a href="#基于距离的SA（DSA）" class="headerlink" title="基于距离的SA（DSA）"></a>基于距离的SA（DSA）</h3><p><img src="/2020/08/25/Surprise-Adequacy/Fig1.png" alt="Fig1" style="zoom:60%;"></p><ul><li><p>对于输入样本$x$，其预测标签为$c_x$，设$x_a$为与其标签相同且激活向量距离最近的训练样本，$x_b$为激活向量离$x_a$最近且类别不同的训练样本，DSA定义为：</p><script type="math/tex; mode=display">DSA(x)= \frac{dist_{a}}{dist_{b}}</script></li><li><p>DSA越大，说明$x$对于类别$c_x$来说越surprise</p></li><li><p>DSA 只适用于分类任务</p></li></ul><h3 id="意外覆盖率的计算（SC"><a href="#意外覆盖率的计算（SC" class="headerlink" title="意外覆盖率的计算（SC)"></a>意外覆盖率的计算（SC)</h3><p>因为LSA和DSA取值都是连续的，我们用被覆盖的段数除以总段数来表示覆盖率：</p><p>给定上界$U$，将$(0,U]$分成n个SA段的bucket：$B=\{b_1,b_2,…,b_n\}$，一组输入$X$的SC定义如下：</p><script type="math/tex; mode=display">SC(X)= \frac{| \{ b_{i}| \exists x \in X:SA(x) \in \left[ U \cdot \frac{i-1}{n},U \cdot \frac{i}{n} \right] \}|}{n}</script><p>注意：一组具有较高SC的输入应该是一组多样化的输入。然而，具有特别高SA值的输入可能<strong>与问题域无关</strong>(如交通标志的图像将与动物图片分类器的测试无关)。因此，SC只能相对于<strong>预定义的上界</strong>来测量。<font color="red">（提前设置好的上界很重要）</font></p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="实验配置"><a href="#实验配置" class="headerlink" title="实验配置"></a>实验配置</h3><ul><li>数据集和模型</li></ul><p><img src="/2020/08/25/Surprise-Adequacy/Fig2.png" alt="Fig2"></p><ul><li><p>对抗样本生成方法</p><ul><li>FGSM</li><li>BIM-A、BIM-B</li><li>JSMA</li><li>C&amp;W</li></ul></li><li><p>合成图像生成方法（Driving数据集）</p><ul><li>Dave2模型：DeepXplore的输入生成（亮度、矩形、污点）和联合优化方法（3个DNN：Dave-2、Dave-dropout、Dave-norminit）</li><li>Chauffeur模型：DeepTest输入生成方法（translation, scale, shear, rotation, contrast, brightness, and blur）</li></ul></li><li><p>参数设置</p><ul><li><p>LSA默认方差阈值：$10^{-5}$</p></li><li><p>kde的带宽使用scott规则设置</p></li><li><p>RQ1</p><ul><li>MNIST选择activation_2层，CIFAR-10选择activation_6层</li></ul></li><li><p>RQ2</p><ul><li>CIFAR10的activation_7和activation_8层的LSA默认方差阈值设置为$10^{-4}$（减少计算消耗）</li></ul></li><li><p>RQ3</p><p><img src="/2020/08/25/Surprise-Adequacy/Fig3.png" alt="Fig3" style="zoom:75%;"></p></li><li><p>RQ4</p><ul><li>MNIST选择activation_3层，CIFAR-10选择activation_5层</li><li>每次重新练运行20次</li></ul></li></ul></li></ul><h3 id="RQ1-SADL是否能够捕获DL系统输入的相对惊讶程度"><a href="#RQ1-SADL是否能够捕获DL系统输入的相对惊讶程度" class="headerlink" title="RQ1 SADL是否能够捕获DL系统输入的相对惊讶程度?"></a>RQ1 SADL是否能够捕获DL系统输入的相对惊讶程度?</h3><ul><li><p>实验方法</p><ul><li>从原始数据集检查是否SA越高的样本越难被分类正确</li><li>检查对抗样本是否SA较高</li><li>最后，我们使用逻辑回归对SA值进行对抗样本分类训练。对于每个敌对攻击策略，我们使用MNIST和CIFAR-10提供的10,000张原始测试图像生成10,000个对抗样本。使用随机选取的1,000张原始测试图像和1,000个对抗样本，我们训练<strong>logistic回归分类器</strong>。<font color="red">(标签是如何确定的？）</font>最后，我们使用剩余的9000幅原始测试图像和9000个敌对例子来评估训练过的分类器。如果SA值正确地捕获DL系统的行为，我们期望基于SA的分类器能够成功地检测出对抗样本。我们使用ROC-AUC进行评估。</li></ul></li><li><p>实验结果</p><ul><li><p>红点对应的图像集合(Ascending SA)从最小SA开始，随着SA的上升，越来越多的高SA</p></li><li><p>蓝点对应的图像组在相反的方向生长(即从SA高的图像到SA低的图像)。</p></li><li><p>作为参考，绿点表示在20次重复中随机增长的集合的平均精度。</p></li><li><p>可以看出，包含LSA值较高的图像，即更多令人惊讶的图像，会导致精度较低。</p><p><img src="/2020/08/25/Surprise-Adequacy/Fig4.png" alt="Fig4"></p></li><li><p>为了在另一个数据集上进行视觉确认，我们也选择了DeepTest为Chauffeur从三个不同级别的LSA值合成的输入集:图3显示，LSA值越高，图像视觉识别就越困难。无论是从数量上还是从视觉上，观察到的趋势都支持了我们的声明，即SADL捕获输入的意外:即使对于看不见的输入，SA也可以度量给定输入的意外程度，这与DL系统的性能直接相关。</p></li><li><p><img src="/2020/08/25/Surprise-Adequacy/Fig5.png" alt="Fig5" style="zoom:60%;"></p></li><li><p>图4显示了由五种技术中的每一种生成的10,000个对抗样本的DSA值的排序图，以及原始的测试输入：</p><p><img src="/2020/08/25/Surprise-Adequacy/Fig6.png" alt="Fig6" style="zoom:80%;"></p></li><li><p>图5是在MNIST和cifar-10的<strong>不同层</strong>中随机选取2000个对抗样本和原始测试集的LSA值的相似图。对于MNIST和cifar10，数据集提供的测试输入(用蓝色表示)往往是最不令人吃惊的，而大多数对抗样本通过较高的SA值与测试输入明显分开。这支持了我们的说法，即SADL可以捕获敌对示例中DL系统行为的差异。</p><p><img src="/2020/08/25/Surprise-Adequacy/Fig7.png" alt="Fig7"></p></li><li><p>最后，表III给出了MNIST和CIFAR-10中使用所有神经元进行基于DSA的分类的ROC-AUC结果。结果表明，图4中DSA值的差距可以用于对敌对的例子进行高精度的分类。</p></li><li><p>对于相对简单的MNIST模型，分类器的ROC-AUC范围在96.97% - 99.38%之间，可以检测出对抗样本。</p></li><li><p>对于更复杂的CIFAR-10模型，基于DSA的分类显示较低的ROC-AUC值，但RQ2的回答表明，来自特定层次的DSA可以产生明显更高的精度。</p><p><img src="/2020/08/25/Surprise-Adequacy/Fig8.png" alt="Fig8" style="zoom:80%;"></p></li><li><p><strong>基于三种不同的分析，RQ1的答案是SADL可以捕获输入的相对惊喜。高SA的输入更难正确分类;对抗性实例的SA值较高，可以根据SA进行相应的分类</strong>。</p></li></ul></li></ul><h3 id="RQ2：神经元层的选择是否对SA反映DL系统行为的准确性有任何影响"><a href="#RQ2：神经元层的选择是否对SA反映DL系统行为的准确性有任何影响" class="headerlink" title="RQ2：神经元层的选择是否对SA反映DL系统行为的准确性有任何影响?"></a>RQ2：神经元层的选择是否对SA反映DL系统行为的准确性有任何影响?</h3><ul><li><p>实验方法：我们通过计算各层的LSA和DSA，然后通过比较各层在SA上训练的对抗性例分类器来评估在SA上下文中的假设。</p></li><li><p>MNIST实验结果</p><ul><li><p>表IV给出了对敌示例分类的ROC-AUC，结果每一行分别对应MNIST中特定层的LSA和DSA上训练的分类器。行按其深度排序，即，activation_3是MNIST中最深也是最后一个隐藏层。每种攻击策略的最高ROC-AUC值以粗体显示。<font color="red">对于MNIST来说，没有明确的证据表明最深的一层是最有效的。</font></p><p><img src="/2020/08/25/Surprise-Adequacy/Fig9.png" alt="Fig9" style="zoom:80%;"></p><ul><li>图5可以解释ROC-AUC是100%的情况：MNIST activation_1对抗样本和测试集里的样本曲线清晰地分离。而MNIST activation_3的LSA曲线有很多交叉。<font color="red">（这个结果比较反直觉）</font></li></ul></li></ul></li><li><p>CIFAR-10实验结果</p><p><img src="/2020/08/25/Surprise-Adequacy/Fig10.png" alt="Fig10" style="zoom:75%;"></p><ul><li>对于LSA，没有强有力的证据表明最深的层产生最准确的分类器。</li><li>然而，对于DSA，最深层次为五种攻击策略中的三种(BIM-B、JSMA和C&amp;W)生成最准确的分类器，而第二层为BIM-A生成最准确的分类器。更重要的是，<font color="red"><strong>单层</strong>DSA比所有<strong>神经</strong>元DSA值产生的分类结果要准确得多</font>（从表III与表IV和表v的对比可以看出）。</li></ul></li><li><p>总结：DSA对其计算的层的选择很敏感，选择较深的层是有益的。然而，对于LSA，没有明确的证据支持更深层次的假设。不同的实例生成策略的层敏感性不同。</p></li></ul><h3 id="RQ3：SC是否与DL系统的现有覆盖率标准存在相关性"><a href="#RQ3：SC是否与DL系统的现有覆盖率标准存在相关性" class="headerlink" title="RQ3：SC是否与DL系统的现有覆盖率标准存在相关性?"></a>RQ3：SC是否与DL系统的现有覆盖率标准存在相关性?</h3><ul><li><p>实验方法</p><ul><li>我们通过累计添加输入控制输入的多样性，执行DL与这些输入，系统研究和比较各种覆盖标准的观察到的变化。包括SC和四个现有的标准:NC、KMNC、NBC、SNAC。</li><li>对于MNIST和cifar-10，我们从数据集提供的原始测试数据(10000幅图像)开始，每一步添加由FGSM、BIM-A、BIM-B、JSMA和C&amp;W生成的1000个对抗性示例。</li><li>对于Dave-2，我们从原始测试数据(5614张图像)开始，在每一步添加由DeepXplore生成的700张合成图像。</li><li>对于Chauffeur来说，每一步增加1000张合成图像(Set1到Set3)，每一张图像都是通过应用随机数量DeepTest的变换生成的。</li></ul></li><li><p>实验结果</p><ul><li><p>表6显示了不同的覆盖率标准如何对日益增加的多样性水平作出反应。列表示步骤，在每一个步骤中会向原始测试集添加更多的输入。如果与前一个步骤相比，<strong>步骤中覆盖率的增加小于0.1个百分点，则该值加下划线</strong>。</p><p><img src="/2020/08/25/Surprise-Adequacy/Fig11.png" alt="Fig11" style="zoom:70%;"></p></li><li><p>图6显示了来自CIFAR-10和Chauffeur的结果的可视化。(注意DSC不能为这两个DL系统计算，因为它们不是分类器。)</p><p><img src="/2020/08/25/Surprise-Adequacy/Fig12.png" alt="Fig12" style="zoom:60%;"></p></li><li><p>总的来说，大多数研究的标准会随着每一步的额外输入而增加。<strong>值得注意的例外是NC，它会在许多步骤中停滞不前。</strong>这与DeepGauge的结果一致。</p></li><li><p>添加的输入类型与不同标准的响应之间存在相互作用:SNAC、KMNC和NBC在CIFAR-10中加入BIM-B示例时显著增加，但在添加C&amp;W输入时变化不大。但是，对于Chauffeur，只有SNAC和NBC在增加输入集1时表现出类似的增长，而KMNC的增长更为稳定。</p></li><li><p>总的来说，除了NC之外，我们回答了RQ3, SC与到目前为止引入的其他覆盖率标准相关。</p></li></ul></li></ul><h3 id="RQ4：SA能否指导DL系统的再训练，以提高它们在对抗样本和由DeepXplore生成的合成测试输入时的准确性"><a href="#RQ4：SA能否指导DL系统的再训练，以提高它们在对抗样本和由DeepXplore生成的合成测试输入时的准确性" class="headerlink" title="RQ4：SA能否指导DL系统的再训练，以提高它们在对抗样本和由DeepXplore生成的合成测试输入时的准确性?"></a>RQ4：SA能否指导DL系统的再训练，以提高它们在对抗样本和由DeepXplore生成的合成测试输入时的准确性?</h3><ul><li><p>实验方法：</p><ul><li>我们检查SA是否可以指导额外训练输入的选择。从这些模型的对抗样本和合成输入中，我们从四个不同的SA范围中选择了4组100张图像。已知$U$为RQ3中用于计算SC的上界，我们将SA $[0, U]$的范围划分为四个重叠的子集: 第一个子集包括低25%的SA值($[0,\frac{U}{4}]$)，第二个子集包括低25%的SA值($[0,\frac{2U}{4}]$)，第三个子集包括低75%的SA值($[0,\frac{3U}{4}]$)，最后是整个范围$[0,U]$。这四个子集代表越来越多样化的投入。我们将范围R设为这四个中的一个，从每个R中随机抽取100张图像，并对现有的模型进行5个额外的epoch训练。最后，我们分别测量每个模型在整个敌对和合成输入下的性能(MNIST和cifar-10的精度，Dave-2的MSE)。我们期望用更多样化的子集进行再培训将会带来更高的性能。</li></ul></li><li><p>实验结果</p><p><img src="/2020/08/25/Surprise-Adequacy/Fig13.png" alt="Fig13" style="zoom:80%;"></p><ul><li>虽然我们的观察局限于DL系统和这里研究的输入生成技术，我们回答RQ4, SA可以提供指导，更有效的再训练DL系统。</li></ul></li></ul><h2 id="可控制参数-变量"><a href="#可控制参数-变量" class="headerlink" title="可控制参数/变量"></a>可控制参数/变量</h2><ul><li>选择神经元的层（单层/所有层）</li><li>过滤神经元的方差阈值</li><li>SA预定义的上界$U$</li><li>覆盖率计算式bucket个数（划分的段数）</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_33935895/article/details/101155270">https://blog.csdn.net/qq_33935895/article/details/101155270</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      
      <category domain="https://rubychen0611.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/">论文笔记</category>
      
      
      <category domain="https://rubychen0611.github.io/tags/DNN%E6%B5%8B%E8%AF%95/">DNN测试</category>
      
      <category domain="https://rubychen0611.github.io/tags/%E6%B5%8B%E8%AF%95%E6%A0%87%E5%87%86/">测试标准</category>
      
      <category domain="https://rubychen0611.github.io/tags/%E8%BE%93%E5%85%A5%E9%AA%8C%E8%AF%81/">输入验证</category>
      
      
      <comments>https://rubychen0611.github.io/2020/08/25/Surprise-Adequacy/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【论文笔记】DeepCover</title>
      <link>https://rubychen0611.github.io/2020/08/24/DeepCover/</link>
      <guid>https://rubychen0611.github.io/2020/08/24/DeepCover/</guid>
      <pubDate>Mon, 24 Aug 2020 07:18:05 GMT</pubDate>
      
      <description>&lt;p&gt;原文：Testing Deep Neural Networks （TECS’19）&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>原文：Testing Deep Neural Networks （TECS’19）<a id="more"></a></p><p>（与DeepConcolic作者相同）</p><p>代码地址：<a href="https://github.com/TrustAI/DeepCover">https://github.com/TrustAI/DeepCover</a></p><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>受MC/DC思想启发提出4种覆盖标准，使用线性规划模型进行约束求解（借助DeepConcolic的方法），生成满足“独立影响”条件且变化较小的测试用例。</p><h2 id="传统MC-DC覆盖"><a href="#传统MC-DC覆盖" class="headerlink" title="传统MC/DC覆盖"></a>传统MC/DC覆盖</h2><p>MC/DC是DO-178B Level A认证标准中规定的，欧美民用航空器强制要求遵守该标准。MC/DC覆盖测试<font color="red">在每个判定中的每个条件都曾独立影响判定的结果至少一次（独立影响意思是在其他条件不变的情况下，改变一个条件）</font>。</p><p>举个例子，制作咖啡需要同时满足壶、杯子和咖啡豆的条件：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( kettle &amp;&amp; cup &amp;&amp; coffee ) {</span><br><span class="line">  <span class="keyword">return</span> cup_of_coffee;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> {</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>三个条件的取值共有8种情况：</p><p><img src="/2020/08/24/DeepCover/Fig2.png" alt="Fig2" style="zoom:80%;"></p><p>但仅4种情况（Test 4、6、7、8）就可以达到100%MC/DC覆盖率，因为：</p><ul><li>Tests 4 &amp; 8 ：Kettle可以独立影响结果</li><li>Tests 6 &amp; 8 ：Mug可以独立影响结果</li><li>Tests 7 &amp; 8：Coffe可以独立影响结果</li></ul><p><img src="/2020/08/24/DeepCover/Fig1.jpg" alt="Fig1" style="zoom:30%;"></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="DNN中的决策和条件"><a href="#DNN中的决策和条件" class="headerlink" title="DNN中的决策和条件"></a>DNN中的决策和条件</h3><ul><li>$\Psi_k$: 一个集合，其中每个元素是神经网络第$k$层节点的一个子集合，表示一个<strong>特征</strong><ul><li>核心思想：不仅要测试某个特征的存在，而且要测试简单特征对更复杂特性的影响。</li></ul></li><li>$t_k = |\Psi_k|$：特征个数</li><li>$\psi_{k,l} (1 \leq l \leq t_k)$：第$l$个特征</li><li>每个特征代表一个<strong>决策（decision）</strong>，其<strong>条件（conditions）</strong>是前一层与其相连的特征</li><li><p>特征的使用将DNN中的基本构建单位从<strong>单个节点</strong>推广到<strong>一组节点</strong>。</p></li><li><p>特征对$(\psi_{k,i},\psi_{k+1,j})$：相邻层的一对特征</p></li><li>符号变化<ul><li>$sc(\psi_{k,l},x_1,x_2)$：对$\psi_{k,l}$中的任意神经元 $n_{k,j}$，$sign(n_{k,j},x_1)\ne sign(n_{k,j},x_2)$</li><li>$nsc(\psi_{k,l},x_1,x_2)$：对$\psi_{k,l}$中的任意神经元 $n_{k,j}$，$sign(n_{k,j},x_1) = sign(n_{k,j},x_2)$</li></ul></li><li>值变化<ul><li>$vc(g,\psi_{k,l},x_1,x_2)$：$g(\psi_{k,l},x_1,x_2)=true$，$g$是一个值函数</li></ul></li></ul><h3 id="覆盖方法"><a href="#覆盖方法" class="headerlink" title="覆盖方法"></a>覆盖方法</h3><ul><li><p>Sign-Sign Coverage (SSC)</p><ul><li><p>对一个特征对$\alpha = (\psi_{k,i},\psi_{k+1,j})$，$\alpha$被两个测试用例$x_1$、$x_2$SS-覆盖，记为$SS(\alpha,x_1,x_1)$。其定义为：</p><ul><li>$sc(\psi_{k,i},x_1,x_2)$ 且$nsc(P_k  \backslash \psi_{k,i},x_1,x_2)$，其中$P_k$为第$k$层所有节点的集合</li><li>$sc(\psi_{k+1,j},x_1,x_2)$</li></ul><font color="red">（即一个条件特征量$\psi_{k,i}$的符号变化独立影响下一层决策特征$\psi_{k+1,j}的$符号变化)</font></li></ul></li><li><p>Value-Sign Coverage (VSC)</p><ul><li>对一个特征对$\alpha = (\psi_{k,i},\psi_{k+1,j})$，值函数$g$，$\alpha$被两个测试用例$x_1$、$x_2$VS-覆盖，记为$VS^g(\alpha,x_1,x_1)$。其定义为：<ul><li>$vc(g,\psi_{k,i},x_1,x_2)$ 且$nsc(P_k ,x_1,x_2)$，其中$P_k$为第$k$层所有节点的集合</li><li>$sc(\psi_{k+1,j},x_1,x_2)$</li></ul></li></ul></li><li><p>Sign-Value Coverage (SVC)</p><ul><li><p>对一个特征对$\alpha = (\psi_{k,i},\psi_{k+1,j})$，值函数$g$，$\alpha$被两个测试用例$x_1$、$x_2$SV-覆盖，记为$SV^g(\alpha,x_1,x_1)$。其定义为：</p><ul><li>$sc(\psi_{k,i},x_1,x_2)$ 且$nsc(P_k  \backslash \psi_{k,i},x_1,x_2)$，其中$P_k$为第$k$层所有节点的集合</li><li>$vc(g,\psi_{k+1,j},x_1,x_2)$且$nsc(\psi_{k+1,j},x_1,x_2)$</li></ul><font color="red">(捕获符号更改情况的决策特征的重大更改)</font></li></ul></li><li><p>Value-Value Coverage (VVC)</p><ul><li><p>对一个特征对$\alpha = (\psi_{k,i},\psi_{k+1,j})$，值函数$g_1$、$g_2$，$\alpha$被两个测试用例$x_1$、$x_2$SV-覆盖，记为$VV^{g_1,g_2}(\alpha,x_1,x_1)$。其定义为：</p><ul><li>$vc(g_1,\psi_{k,i},x_1,x_2)$ 且$nsc(P_k ,x_1,x_2)$，其中$P_k$为第$k$层所有节点的集合</li><li>$vc(g_2,\psi_{k+1,j},x_1,x_2)$且$nsc(\psi_{k+1,j},x_1,x_2)$</li></ul><font color="red">(条件特征没有符号变化，但决策特征的值发生显著变化)</font></li></ul></li></ul><h3 id="覆盖率计算"><a href="#覆盖率计算" class="headerlink" title="覆盖率计算"></a>覆盖率计算</h3><p>令$F= \left\{ SS,VS^{g},SV^{g},VV^{g_{1},g_{2}} \right\}$，给定DNN$N$和覆盖方法$f \in F$，测试特征对集合$O$，测试集$T$的覆盖率：</p><script type="math/tex; mode=display">M_{f}(N,T)= \frac{| \left\{ \alpha \in O| \exists x_{1},x_{2} \in T:f( \alpha ,x_{1},x_{2}) \right\} |}{|O|}</script><p>即被覆盖的测试特征对所占比例。</p><h3 id="与现有覆盖标准的强弱关系"><a href="#与现有覆盖标准的强弱关系" class="headerlink" title="与现有覆盖标准的强弱关系"></a>与现有覆盖标准的强弱关系</h3><p><img src="/2020/08/24/DeepCover/Fig3.png" alt="Fig3" style="zoom:60%;"></p><h3 id="自动测试用例生成"><a href="#自动测试用例生成" class="headerlink" title="自动测试用例生成"></a>自动测试用例生成</h3><ul><li>测试预言<ul><li>$X$为一组被正确标记的测试用例，$x \in X$，若$x’$与$x$足够接近且预测标签一致，则称$x’$通过测试预言</li></ul></li><li><strong>通过线性编程（LP）生成测试用例</strong><ul><li>方法同DeepConcolic</li></ul></li><li><strong>通过启发式搜索生成测试用例</strong><ul><li>基于梯度下降搜索覆盖特定特征对的输入对</li></ul></li></ul><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><ul><li>MNIST、CIFAR-10、ImageNet</li></ul><h3 id="可控制参数及变量"><a href="#可控制参数及变量" class="headerlink" title="可控制参数及变量"></a>可控制参数及变量</h3><ul><li>LP调用时使用的约束：$\parallel x_2 - x_1 \parallel _ \infty$</li><li>$SV^g$中：$ g= \frac{u_{k+1},j \left[ x_{2} \right] }{u_{k+1},j \left[ x_{1} \right] } \geqslant \sigma $ ，$\sigma = 2$</li><li>$VV^{g_1,g_2}$中：$\sigma = 5$</li><li>每个特征包含神经元个数<ul><li>大小用参数$w$来调节：$\psi _{k,i} \leq w \cdot s_k$</li></ul></li></ul><h3 id="MNIST上的实验结果"><a href="#MNIST上的实验结果" class="headerlink" title="MNIST上的实验结果"></a>MNIST上的实验结果</h3><ul><li>一个特征即一个神经元</li><li>训练10个DNN（准确率&gt;97%)</li></ul><p><img src="/2020/08/24/DeepCover/Fig4.png" alt="Fig4" style="zoom:67%;"></p><ul><li>DNN错误查找结果：<ul><li>测试用例生成算法有效地实现了对所有覆盖标准的高覆盖，</li><li>覆盖方法被认为是有用的，因为找出了很多对抗样本。</li></ul></li><li>DNN安全分析：<ul><li>覆盖率$M_f$和对抗性实例百分比$AE_f$一起提供了评估DNN的定量统计数据。一般来说，给定一个测试集，一个具有高覆盖率水平$M_f$和低对抗百分比$AE_f$的DNN被认为是鲁棒的。</li><li>下图展示了对抗样本的距离和累积对抗样本数的关系。一个更稳健的DNN将在小距离末端(接近0)有更低的形状，因为报告的敌对的例子相对于他们原始的正确输入是更远的。直觉上，这意味着需要付出更多的努力来愚弄一个稳健的DNN，使其从正确的分类变成错误的标签。</li></ul></li></ul><p><img src="/2020/08/24/DeepCover/Fig5.png" alt="Fig5" style="zoom:60%;"></p><ul><li>逐层的行为：<ul><li>当深入DNN时，神经元对的覆盖会变得更加困难。在这种情况下，为了提高覆盖性能，在生成测试对时需要使用较大的数据集。图5b给出了在不同层中发现的敌对示例的百分比(在所有敌对示例中)。有趣的是，大多数对抗性的例子似乎都是在测试中间层时发现的。</li></ul></li></ul><p><img src="/2020/08/24/DeepCover/Fig6.png" alt="Fig6" style="zoom:60%;"></p><ul><li><p>高权重的SSC：</p><ul><li>为了减少测试特征对的数量，仅选择带有较高权重的一些神经元作为特征，改变前后二者的区别不大，因此实际使用时可以采用这种方式减少开销。</li></ul><p><img src="/2020/08/24/DeepCover/Fig7.png" alt="Fig7" style="zoom:60%;"></p></li><li><p>调用LP的开销</p><ul><li>对于每个DNN，我们选择一组神经元对，其中每个决策神经元位于不同的层。然后，我们测量变量和约束的数量，以及在解决每个LP调用上花费的时间(以秒计算)。表3中的结果证实了部分激活模式的LP模型确实是轻量级的，并且在遍历一个DNN的更深层时，其复杂度以线性方式增加。</li></ul></li></ul><p><img src="/2020/08/24/DeepCover/Fig8.png" alt="Fig8" style="zoom:60%;"></p><h3 id="CIFAR10上的实验结果"><a href="#CIFAR10上的实验结果" class="headerlink" title="CIFAR10上的实验结果"></a>CIFAR10上的实验结果</h3><ul><li>在不失一般性的前提下，卷积层节点的激活是通过激活一个子集的先例节点来计算的，每个节点都属于其层中的一个feature map。我们将算法1中的启发式测试用例生成应用于SS覆盖率，并在每个不同的层分别度量决策特征的覆盖率结果。</li><li>总的来说，SS覆盖率高于90%是通过相当一部分的敌对示例实现的。</li><li>一个有趣的观察是,<font color="red">更深层的因果变化的特性能够检测小扰动的输入导致对抗的行为</font>,而这有可能为开发人员提供有用的反馈调试或优化神经网络参数。</li></ul><p><img src="/2020/08/24/DeepCover/Fig9.png" alt="Fig9" style="zoom:60%;"></p><h3 id="ImageNet上的实验结果"><a href="#ImageNet上的实验结果" class="headerlink" title="ImageNet上的实验结果"></a>ImageNet上的实验结果</h3><ul><li><p>VGG16+启发式测试用例生成算法</p></li><li><p>特征：一组神经元</p><ul><li>大小用参数$w$来调节：$\psi _{k,i} \leq w \cdot s_k$，$s_k$为该层神经元总数</li></ul></li><li><p>我们测试了2000个随机特征对的SS覆盖情况，$w \in \{0.1\%、0.5\%、1.0\%\}$。</p><ul><li><p>覆盖结果：10.5%，13.6%和14.6%是对抗样本。对抗样本的平均距离和标准偏差：</p><p><img src="/2020/08/24/DeepCover/Fig10.png" alt="Fig10" style="zoom:60%;"></p></li><li><p>结果表明，特征对与输入扰动之间存在一定的关系。在生成的对抗样本中，<font color="red">更细粒度的特征比粗糙的特征能够捕获更小的扰动。</font></p></li></ul></li><li><p><font color="red">我们注意到访问边界激活值很可能要求对DNNs进行更大的更改。</font>我们设置功能大小使用$w$= 10%,获得的测试集中有22.7%的对抗样本。然而，这些敌对的例子的距离，平均L∞-norm距离3.49，标准差3.88，远远大于SS覆盖的距离</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      
      <category domain="https://rubychen0611.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/">论文笔记</category>
      
      
      <category domain="https://rubychen0611.github.io/tags/DNN%E6%B5%8B%E8%AF%95/">DNN测试</category>
      
      <category domain="https://rubychen0611.github.io/tags/%E6%B5%8B%E8%AF%95%E6%A0%87%E5%87%86/">测试标准</category>
      
      <category domain="https://rubychen0611.github.io/tags/MC-DC/">MC/DC</category>
      
      
      <comments>https://rubychen0611.github.io/2020/08/24/DeepCover/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【论文笔记】DeepImportance</title>
      <link>https://rubychen0611.github.io/2020/08/22/DeepImportance/</link>
      <guid>https://rubychen0611.github.io/2020/08/22/DeepImportance/</guid>
      <pubDate>Sat, 22 Aug 2020 07:03:46 GMT</pubDate>
      
      <description>&lt;p&gt;原文：Importance-Driven Deep Learning System Testing （ICSE’20)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>原文：Importance-Driven Deep Learning System Testing （ICSE’20)  <a id="more"></a></p><p>代码地址：<a href="https://github.com/DeepImportance/deepimportance_code_release">https://github.com/DeepImportance/deepimportance_code_release</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>提出了一种重要性驱动的覆盖标准，首先从训练集和预训练后的DNN模型中分析出重要神经元，然后将重要神经元的激活值聚类，计算测试集对重要神经元激活值簇的组合的覆盖比例，用于评价测试集的<font color="red">语义多样性</font>。</p><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>作者认为前人提出的覆盖标准（如DeepXplore和DeepGauge）：</p><ul><li>这些标准只是神经元(或神经元区域)的集合，它们的激活值符合一定的条件。通过只关注这些受约束的神经元属性而忽略整体DL系统行为，<font color="red">测试集和决策之间的因果关系是无信息性的。</font><ul><li>一个神经元可能有助于增强对其他类的信心，而不是正确的类，这是无法区分的。</li></ul></li><li>这些标准的实例化依赖于<font color="red">用户自定义的条件</font>(所选择神经元的区域、取值上限)，这些条件可能不能充分地表示DL系统的实际行为。</li><li>这些标准不能有效提供<font color="red">单个测试输入的贡献</font>。</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p><img src="/2020/08/22/DeepImportance/Fig1.png" alt="Fig1"></p><p>步骤：</p><p>1、分析重要神经元</p><p>2、重要神经元激活值聚类</p><p>3、评价测试集的重要神经元覆盖率</p><h3 id="重要神经元分析"><a href="#重要神经元分析" class="headerlink" title="重要神经元分析"></a>重要神经元分析</h3><ul><li><p>逐层相关性传播算法（layer-wise relevance propagation）：</p><ul><li><p>全连接层中：每个神经元的相关性由下一层所有神经元的相关性计算得出：<font color="red">（分母为什么是$\sum i$ ??)</font></p><script type="math/tex; mode=display">R_{ij}= \sum _{k} \frac{ \phi (x,n_{ij})w_{ijk}}{ \sum _{i} \phi (x,n_{ij})w_{ijk}+ \epsilon }R_{i+1,k}</script><ul><li>相关性与激活值成正比：激活值越高的神经元相关性贡献越大</li><li>相关性与连接权重$w_{ijk}$成正比：通过更重要的连接，会产生更多的相关性</li></ul></li></ul></li><li><p>重要性计算算法</p><p><img src="/2020/08/22/DeepImportance/Fig2.png" alt="Fig2" style="zoom:70%;"></p><ul><li>第5行：通过前向传播获得最后一层输出值（softmax之前的值）</li><li>6-8行：反向传播计算相关性</li><li>第10行：分析函数分析所有输入的所有神经元的相关性得分，并根据优先级标准(例如，累积相关性，标准化相关性)对它们进行优先级排序（实验中我们使用累积相关性）</li><li>第11行：返回最重要的m个神经元</li></ul></li><li><p>相关性分析</p><ul><li>使用相关性来识别最重要的神经元是我们的方法的一个关键成分。基于最近<font color="red">DL系统可解释性的研究</font>，其目标是识别负责预测的输入部分，深度重要性的目标是识别最具影响力的神经元;这些是高风险的神经元，应该进行彻底的测试。尽管超出了这项工作的范围，我们也强调<strong>其他可解释性驱动技术</strong>可以用于鉴定最重要的神经元</li><li>与敏感性分析有很大区别：敏感性分析关注的是什么使<strong>已标记</strong>的样本(例如，一只狗)更多或更少地被归类为<strong>目标标签</strong>，而相关性分析研究的是什么使样本被归类为该标签。敏感度分数并不能真正解释为什么样本以某种方式被预测，而是解释输出在<font color="red">输入空间</font>的哪个方向最敏感<font color="red">（输入空间而不是神经元）</font>。相反，相关性得分表明哪些神经元/输入对分类是关键的。</li></ul></li></ul><h3 id="重要神经元聚类"><a href="#重要神经元聚类" class="headerlink" title="重要神经元聚类"></a>重要神经元聚类</h3><ul><li>动机<ul><li>由于每个神经元负责感知输入区域内的特定特征，我们认为，对于具有类似特征的输入，那些重要神经元的激活值集中在它们的<font color="red">值域中的特定区域</font>。非正式地说，这些区域形成一种模式，捕获DL系统中最具影响力的神经元的活动。</li><li>与DeepGauge中的KMNC相比较，我们的方法生成的簇对应每个神经元不同的<strong>语义特征</strong>。</li></ul></li><li>算法<ul><li>$k$-means聚类：我们将每个重要神经元的激活值划分为组(簇)，使同一组内的激活值与同一组内的其他激活值更相似，而与其他组内的激活值不相似。</li><li>如何确定$k$值？<ul><li>我们使用Silhouette index自动识别一种神经元特异性的最优策略，用于聚类每个重要神经元的激活值。（略）</li></ul></li></ul></li></ul><h3 id="基于重要性的覆盖率（IDC）"><a href="#基于重要性的覆盖率（IDC）" class="headerlink" title="基于重要性的覆盖率（IDC）"></a>基于重要性的覆盖率（IDC）</h3><p>评价测试集对于重要神经元的激活值簇的组合的覆盖情况。</p><p>重要神经元激活值簇的组合定义为：</p><script type="math/tex; mode=display">INCC= \prod _{n \in D_{m}} \left\{ CENTROID( \Phi _{n}^{i})|\forall 1 \leqslant i \leqslant | \Phi _{n}| \right\}</script><p>IDC定义为：(即有多少组组合被覆盖)</p><p>$IDC(Y)= \frac{| \left\{ INCC(j)|\exists y \in Y:\forall V_{n}^{i} \in INCC(j) \bullet \min d( \phi (y,n),V_{n}^{i} \right\} |}{|INCC|}$</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="数据集和模型"><a href="#数据集和模型" class="headerlink" title="数据集和模型"></a>数据集和模型</h3><p><img src="/2020/08/22/DeepImportance/Fig3.png" alt="Fig3" style="zoom:60%;"></p><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><ul><li>神经元覆盖率NC：阈值为0.75</li><li>TKNC：$k=3$</li><li>KMNC：$k=1000$</li><li>NBC、SNAC：训练集激活值的最值为上下界</li><li>DSC、LSC：上界为2、2000，bucket数为1000</li><li>选择重要性神经元的层：<strong>倒数第二层</strong></li><li>$m \in \{6,8,10,12\}$</li><li>最大运行时间：3h</li><li>对抗样本生成方法：FGSM、BIM、JSMA、C&amp;W</li></ul><h3 id="RQ1-重要性-神经元重要性分析能识别出最重要的神经元吗"><a href="#RQ1-重要性-神经元重要性分析能识别出最重要的神经元吗" class="headerlink" title="RQ1(重要性):神经元重要性分析能识别出最重要的神经元吗?"></a>RQ1(重要性):神经元重要性分析能识别出最重要的神经元吗?</h3><ul><li>实验方法：使用[11]中可解释性工作的方法识别出前10%的重要像素，扰动这些像素的值（超过0.5则设为0，不足0.5设为1），测量随机选取的神经元和DeepImportance选取的重要神经元的值的改动情况，如下表所示。</li><li>实验结果：DeepImportance选取出的重要神经元变动幅度更大，说明这些神经元对给定输入的相关像素的变化更敏感。</li></ul><p><img src="/2020/08/22/DeepImportance/Fig4.png" alt="Fig4" style="zoom:30%;"></p><h3 id="RQ2-多样性-DeepImportance能有助于选择多样化的测试集吗"><a href="#RQ2-多样性-DeepImportance能有助于选择多样化的测试集吗" class="headerlink" title="RQ2(多样性):DeepImportance能有助于选择多样化的测试集吗?"></a>RQ2(多样性):DeepImportance能有助于选择多样化的测试集吗?</h3><ul><li><p>实验方法：</p><ul><li><p>$U_{DI}$: 在所有图片前2%重要像素（识别方法同上）上增加高斯白噪声扰动（MNIST 15个像素，CIFAR-10 20个像素，driving 200个像素）</p></li><li><p>$U_S$:和$U_{DI}$一样，但像素位置是随机选的</p><p><img src="/2020/08/22/DeepImportance/Fig5.png" alt="Fig5" style="zoom:60%;"></p></li></ul></li><li><p>实验结果</p><p><img src="/2020/08/22/DeepImportance/Fig6.png" alt="Fig6"></p><ul><li>对于IDC标准：$U_{O+DI}$在所有实验配置上覆盖率最高。表明IDC对决策任务中重要的输入特性更为敏感，而不是随机选择的特性。</li><li>随着$m$增加，IDC覆盖率逐渐降低，</li></ul></li></ul><h3 id="RQ3-有效性-DeepImportance在识别DL系统中的错误行为时的效果"><a href="#RQ3-有效性-DeepImportance在识别DL系统中的错误行为时的效果" class="headerlink" title="RQ3(有效性):DeepImportance在识别DL系统中的错误行为时的效果?"></a>RQ3(有效性):DeepImportance在识别DL系统中的错误行为时的效果?</h3><ul><li>生成对抗样本<ul><li>FGSM、BIM、JSMA、C&amp;W和RQ1中的白噪音数据集（$U_S$:方差为0.3,准确率97.4%）</li></ul></li></ul><p><img src="/2020/08/22/DeepImportance/Fig7.png" alt="Fig7" style="zoom:40%;"></p><ul><li>实验结果：<ul><li>与原始测试集$U_O$相比，所有DL系统的增强测试集的IDC覆盖率结果都有相当大的增长。</li><li>与高斯类噪声输入$U_{O+S}$相比，在含有对抗样本的测试集中，这种增长更为显著。</li><li>IDC对敌对的输入很敏感，并且在输入与之前遇到的输入在语义上不同的测试集中能够有效地检测出错误行为。</li></ul></li></ul><h3 id="RQ4-相关性-DeepImportance与现有覆盖率标准的相关性"><a href="#RQ4-相关性-DeepImportance与现有覆盖率标准的相关性" class="headerlink" title="RQ4(相关性):DeepImportance与现有覆盖率标准的相关性?"></a>RQ4(相关性):DeepImportance与现有覆盖率标准的相关性?</h3><ul><li>如上图。IDC显示了与DL系统其他覆盖标准相似的行为;因此，二者之间存在正相关关系。</li></ul><h3 id="RQ5-层灵敏度-特定神经元层的选择如何影响DeepImportance的行为"><a href="#RQ5-层灵敏度-特定神经元层的选择如何影响DeepImportance的行为" class="headerlink" title="RQ5(层灵敏度):特定神经元层的选择如何影响DeepImportance的行为?"></a>RQ5(层灵敏度):特定神经元层的选择如何影响DeepImportance的行为?</h3><p><img src="/2020/08/22/DeepImportance/Fig8.png" alt="Fig8" style="zoom:60%;"></p><ul><li>我们观察到，当分析在较深的层而不是浅层执行时，IDC值会增加</li><li>IDC对具有不同语义输入的测试集更敏感($U_{O+DI}$)</li><li>目标层的选择会影响IDC的结果。由于倒数第二层负责理解语义上重要的高级特性，我们认为它是使用IDC评估测试集充分性的合适选择。</li></ul><h2 id="可控制参数-变量"><a href="#可控制参数-变量" class="headerlink" title="可控制参数/变量"></a>可控制参数/变量</h2><ul><li>$m$：选择的重要神经元个数，决定了测试的粒度，$m$越大组合数爆炸式增长</li><li>选择重要性神经元的层</li></ul><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>这篇文章所采用的重要性神经元识别方法非原创（来自《On Pixel-Wise Explanations for Non-Linear Classifier Decisions by Layer-Wise Relevance Propagation》）；覆盖率计算方法也很简单（组合测试）。亮点在于将DNN测试覆盖标准与语义可解释性相结合，这可能是未来的一个趋势。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      
      <category domain="https://rubychen0611.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/">论文笔记</category>
      
      
      <category domain="https://rubychen0611.github.io/tags/DNN%E6%B5%8B%E8%AF%95/">DNN测试</category>
      
      <category domain="https://rubychen0611.github.io/tags/%E6%B5%8B%E8%AF%95%E6%A0%87%E5%87%86/">测试标准</category>
      
      
      <comments>https://rubychen0611.github.io/2020/08/22/DeepImportance/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Google Girl Hackathon Season VI赛后感</title>
      <link>https://rubychen0611.github.io/2020/08/21/Google-Girl-Hackathon/</link>
      <guid>https://rubychen0611.github.io/2020/08/21/Google-Girl-Hackathon/</guid>
      <pubDate>Fri, 21 Aug 2020 11:24:36 GMT</pubDate>
      
      <description>&lt;p&gt;【8月27日更新】终于收齐所有奖品啦~~&lt;span class=&quot;github-emoji&quot; style=&quot;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8) center/contain&quot; data-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8&quot;&gt;😁&lt;/span&gt;&lt;span class=&quot;github-emoji&quot; style=&quot;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8) center/contain&quot; data-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8&quot;&gt;😁&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;一整套​Google周边&lt;span class=&quot;github-emoji&quot; style=&quot;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8) center/contain&quot; data-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8&quot;&gt;👇&lt;/span&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>【8月27日更新】终于收齐所有奖品啦~~<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8">😁</span><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8">😁</span>  </p><p>一整套​Google周边<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8">👇</span><a id="more"></a></p><p><img src="/2020/08/21/Google-Girl-Hackathon/Fig1.jpg" alt="Fig1" style="zoom:15%;"></p><hr><p>今年的Google女生黑客马拉松比赛历时四个月终于在上个周末结束啦。我们队伍获得项目第一名（1/198）和最受欢迎奖（所有决赛参赛者投票投出来的），这个结果其实在意料之外也在意料之中，不过归根结底还是很不容易（要知道去年我可是连简历关都没过= = |||），今天来总结一下赛后感。</p><p>今年由于疫情，比赛改成了线上举办，赛题为设计并开发出一款对疫情有帮助的产品，形式不限，必须用到至少一个Google的工具。初赛交设计方案，复赛交代码、文档和视频Demo，决赛线上展示和答辩。（比赛主页：<a href="https://events.withgoogle.com/google-girl-hackathon-cn/#content">https://events.withgoogle.com/google-girl-hackathon-cn/#content</a> ）</p><p>我们提交的产品是一款疫情国际新闻浏览APP，但与一般新闻APP不同的是，我们的APP将不同媒体报道的同一新闻（或相关新闻）聚集成一个个新闻组，对新闻组里每条新闻组进行情绪分析后，将包含情绪分差较大的新闻组排到前面展示给用户。核心思想是情绪差异较大的文章往往意味着观点上的差异也较大，从中我们可以发现媒体偏见，尽管每篇文章本身并非完全客观的，但通过对比不同观点的文章，希望用户从中培养理性和独立思考的习惯，摒弃偏见和成见，增进互相理解、齐心抗疫。</p><p>这是我们的演示视频（更新后的版本）：</p><iframe width="560" height="315" src="https://www.youtube.com/embed/8401Arz0FHs" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><p>APP前端用的是Google的Flutter，这个是第一次写，以前只写过IOS和一点点安卓，不过上手还是蛮快的，现成的模板有很多。下面是APP后端运行的一个原理流程图↓，后端由Python编写，新闻爬虫部分使用的是GitHub上的一个开源工具NewsPaper3k，能够自动从指定的新闻网站链接爬取新闻（标题、内容、图片等，共50多个英文网站），先保存在本地的MySQL数据库里。接下来我们将每篇文章用TF-IDF算法进行编码，然后使用基于密聚类度的DBSCAN算法将相关新闻聚类，选择合适参数下聚类效果还是不错的，其余没被聚成类的文章则被丢弃。然后用Vader工具对新闻组里的文章进行情绪分析，Vader使用的是基于词典的无监督情绪分析算法，根据标题和正文的综合得分给出每篇文章的情绪分数，Vader是跟其他两个工具（包括TextBlob和另外一个忘了）进行人工比较效果后选择的，效果还是可以的，比如我们观察到跟朝鲜相关的新闻，几乎都是一水儿的超级负面情绪，（评委曾问我如何评价效果，这个因为没有标注我说只能人工检查，或者说我们的效果依赖于使用工具的效果，暂时没想到更好的检查方法）。最后我们将包含情绪分差较大的新闻组排在前面，并上传到LeanCloud后端云数据库中（其实本来想用的是Google的Firebase，但网实在不太好，而且Firebase竟然没有关于在Flutter上如何使用的文档，震惊）。前端的设备直接和LeanCloud交互获得数据，以及完成一些辅助功能如评论、收藏、搜索等。</p><p><img src="/2020/08/21/Google-Girl-Hackathon/overview.png" alt="overview" style="zoom:30%;"></p><p>总结一下我觉得此次能得奖的关键之处吧（开始不要脸的自夸）：</p><p>首先我们的立足点足够大、解决的问题足够广泛，评委在颁奖时强调了我们产品注重多样性的特点与Google致力的目标一致。这个idea其实是我日常刷完各种公众号、豆瓣、知乎之后半夜躺在床上有感而发想出来的，视频和PPT里引用的谭德塞的话是某天知乎热榜标题上看到的，所以动机其实也是带着真情实感的。。虽然受到过队友质疑反对但还是据理力争做下来了。尽管情绪分析的方法很简单常见，但我们的最终目标其实是发现不同观点的文章，情绪分析只是我们挑选的一个容易下手的角度，还有更多复杂的观点分析方法可以运用在我们的产品中。</p><p>高中语文课学过的课文我一篇也记不起来了，但语文老师有两句话我一直记得，一句是他在我们文理分科前建议我们学理科，因为科技可以改变世界，但记住一定要做一个“有情怀的理科生”。另一句是他语重心长地和我们说人应该常怀“悲悯“。当时之所以印象深刻，可能是因为这两个词都曾被他大大地写在了黑板上，但那时候却并不明白个中意味，直到最近几年才常想起才觉得常想常新。我想今天拿到这个比赛结果也算没有辜负他的话。我始终觉得，作为科技行业从业者，开发出为人们提供日常生活便利和娱乐的产品当然好，但更高的要求是看到人世间的苦难并尝试为其做出一点改变，或是对人们的思想和精神领域带来正面的影响。</p><p>第二也要感激这一年的研究生生活，从写论文、看论文、讲论文的过程中不知不觉培养了自己英文学术写作和演示的能力。逐渐发现作品本身质量固然重要，但如何讲好一个完整的故事有时候更加重要，一个专业、逻辑清晰完整、美观大方的展示会给产品大大加分，反之搞不好会给本来不错的产品扣印象分，那就得不偿失了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      
      <category domain="https://rubychen0611.github.io/categories/%E6%9D%82%E8%AE%B0%E9%9A%8F%E6%84%9F/">杂记随感</category>
      
      
      <category domain="https://rubychen0611.github.io/tags/%E6%AF%94%E8%B5%9B/">比赛</category>
      
      <category domain="https://rubychen0611.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/">移动开发</category>
      
      
      <comments>https://rubychen0611.github.io/2020/08/21/Google-Girl-Hackathon/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【论文笔记】DeepHunter</title>
      <link>https://rubychen0611.github.io/2020/08/20/DeepHunter/</link>
      <guid>https://rubychen0611.github.io/2020/08/20/DeepHunter/</guid>
      <pubDate>Thu, 20 Aug 2020 08:56:28 GMT</pubDate>
      
      <description>&lt;p&gt;原文：DeepHunter: A Coverage-Guided Fuzz Testing Framework for Deep Neural Networks （ISSTA’19)&lt;/p&gt;
&lt;p&gt;Coverage-guided Fuzzing for Feedforward Neural Networks (ASE’19)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>原文：DeepHunter: A Coverage-Guided Fuzz Testing Framework for Deep Neural Networks （ISSTA’19)</p><p>Coverage-guided Fuzzing for Feedforward Neural Networks (ASE’19)  <a id="more"></a></p><p>代码地址：<a href="https://bitbucket.org/xiaofeixie/deephunter/src/master/">https://bitbucket.org/xiaofeixie/deephunter/src/master/</a></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul><li><p>输入和可控变量：</p><ul><li>初始种子集合</li><li>种子选择策略：<ul><li>①随机</li><li>②根据新鲜程度选择</li><li>③平衡新鲜和多样<ul><li>带有参数$\gamma$、$p_{min}$</li></ul></li></ul></li><li>蜕变变换方法<ul><li>8种图像变换方法<ul><li>4种像素级别变换（像素值改变）：反相、亮度、模糊、噪声</li><li>4种仿射变换（移动像素位置）：平移、缩放、裁剪、旋转</li></ul></li><li>约束策略中的$\alpha$、$\beta$参数</li></ul></li><li>K：常数，变换次数</li><li>覆盖率标准：5种（NC、KMNC、NBC、SNAC、TKNC）标准及其附带参数</li></ul></li><li><p>输出：1、能最大化覆盖率的预测正确的样例 2、预测错误的样例</p><p><img src="/2020/08/20/DeepHunter/1.png" alt="1" style="zoom:60%;"></p><h3 id="保持蜕变变换语义不变的策略"><a href="#保持蜕变变换语义不变的策略" class="headerlink" title="保持蜕变变换语义不变的策略"></a>保持蜕变变换语义不变的策略</h3><ul><li><p>8种图像变换方法</p><ul><li>4种像素级别变换（像素值改变）：反相、亮度、模糊、噪声</li><li>4种仿射变换（移动像素位置）：平移、缩放、裁剪、旋转</li></ul></li><li><p>假设一次变换语义不变（参数合适的情况下）。</p></li><li><font color="red">策略：只允许一次仿射变换，像素变换可以使用多次，但要进行约束</font><ul><li><p>约束条件：像素变换应满足f(s,s’)的条件，$L_0$表示发生变化的像素数目的最大值，$L_\infty$表示像素值变化的最大值。即：要么发生变化的像素数不多，要么变化的像素数多，但像素值变化都不大。平衡二者</p><p><img src="/2020/08/20/DeepHunter/4.png" alt="4" style="zoom:70%;"></p></li></ul></li><li><p>reference image：一张图像在经过一系列变换后（最多一次仿射变换），计算f(s,s’)。如果没有仿射变换的话，参考图像为原图；否则参考图像为中间经过一次仿射变换后的图像。</p><ul><li><p>如果有仿射变换，则$L_0$、$L_\infty$计算方法如下</p><p><img src="/2020/08/20/DeepHunter/3.png" alt="3" style="zoom:60%;"></p></li></ul></li><li><p>种子选择策略（三种）</p><ul><li><p>传统程序和TensorFuzz、DeepTest：用栈，选最新生成的种子</p></li><li><p>uniform：随机选一个种子</p></li><li><p>新策略Probability：平衡新鲜性和多样性，种子s被选择的概率：</p><p><img src="/2020/08/20/DeepHunter/4.png" alt="4" style="zoom:60%;"></p></li></ul></li></ul></li></ul><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="数据集和DNN模型"><a href="#数据集和DNN模型" class="headerlink" title="数据集和DNN模型"></a>数据集和DNN模型</h3><p><img src="/2020/08/20/DeepHunter/5.png" alt="5" style="zoom:60%;"></p><h3 id="共同参数设置"><a href="#共同参数设置" class="headerlink" title="共同参数设置"></a>共同参数设置</h3><ul><li><p>NC阈值：0.75（与DeepXplore相同）</p></li><li><p>KMNC的K=1000</p></li><li><p>SNAC、NBC、TKNC与DeepGauge相同设置</p></li><li><p>TRY_NUM=50</p></li><li><p>$\gamma=20$，$p_{min}=0.5$ </p></li><li>$K=20$</li></ul><h3 id="RQ1（蜕变变换）：从人类角度看，不同的变换及约束策略对生成和原图片相同语义的新图效果如何？"><a href="#RQ1（蜕变变换）：从人类角度看，不同的变换及约束策略对生成和原图片相同语义的新图效果如何？" class="headerlink" title="RQ1（蜕变变换）：从人类角度看，不同的变换及约束策略对生成和原图片相同语义的新图效果如何？"></a>RQ1（蜕变变换）：从人类角度看，不同的变换及约束策略对生成和原图片相同语义的新图效果如何？</h3><ul><li><p>实验设计</p><ul><li><p>比较三种变换及约束策略：<font color="red">（仅约束策略还是连带变换策略？没说清楚）</font></p><ul><li><p>DeepHunter：用f(s,s’)限制，设置$\alpha=0.02，\beta=0.2$</p></li><li><p>TensorFuzz： 用 $L_\infty=0.4$限制</p></li><li><p>DeepTest： 用保守的参数限制(原文的MSE限制仅限回归任务，所以没用)</p></li></ul></li><li><p>每个数据集随机选择30个种子输入生成5000张图片，3个数据集*3种生成方法*生成5000张图片=共45000张图片</p></li><li><p>9个测试者每人看一组图片：如果生成的图片与原图分类不同、或是没有语义则被标记为invalid。</p></li></ul></li><li><p>实验结果</p><p><img src="/2020/08/20/DeepHunter/6.png" alt="10"></p><ul><li>对三种策略：CIFAR-10数据集的无效率普遍高于其他两个数据集<ul><li>原因：CIFAR-10分辨率较低，即使是DNN能识别的有效输入，对于人类常难以识别</li></ul></li><li>即使DeepTest的参数设置很保守，但是仍生成了很多无效输入；TensorFuzz经过L∞限制后无效输入少了很多</li><li>结论：DeepHunter的蜕变变换策略有效减少了生成无效图片的数量</li></ul></li></ul><h3 id="RQ2（覆盖率）：CGF是否在DNN测试领域仍能有效提升覆盖率？不同覆盖标准下，不同的seed生成策略对提升覆盖率效果如何？"><a href="#RQ2（覆盖率）：CGF是否在DNN测试领域仍能有效提升覆盖率？不同覆盖标准下，不同的seed生成策略对提升覆盖率效果如何？" class="headerlink" title="RQ2（覆盖率）：CGF是否在DNN测试领域仍能有效提升覆盖率？不同覆盖标准下，不同的seed生成策略对提升覆盖率效果如何？"></a>RQ2（覆盖率）：CGF是否在DNN测试领域仍能有效提升覆盖率？不同覆盖标准下，不同的seed生成策略对提升覆盖率效果如何？</h3><ul><li><p>RQ2&amp;3 实验设计</p><ul><li>比较5种seed选取策略<ul><li>Random testing (RT)without coverage guidance. 作为baseline，随机测试，无覆盖率作为向导</li><li>DeepHunter+Uniform (DH+UF) ：使用不同的覆盖率标准作为向导，随机选择种子顺序</li><li>DeepHunter+Probability (DH+Prob)：使用不同的覆盖率标准作为向导，用概率策略选择种子顺序</li><li>DeepTest seed selection strategy with coverage guidance：选最新的；如果一个种子生成的所有新样例都不能提升覆盖率，则该种子被移出队列。队列可能变空。</li><li>TensorFuzz seed selection strategy with coverage guidance：随机选一个种子和队列最后的5个种子，再从中随机选一个</li></ul></li><li><p>21个fuzzers：5 个覆盖准则 × 4 个seed选择策略 + 1 RT with no coverage guidance，使用的模型为MNIST和CIFAR-10的四个模型；每个fuzzer运行10遍取平均</p></li><li><p>初始种子1000个：被所有模型都正确分类的测试数据</p></li><li>每个fuzzer迭代次数相同（5000次），使用的蜕变变换策略相同<font color="red">（是什么？）</font></li></ul></li><li><p>实验结果</p><p><img src="/2020/08/20/DeepHunter/7.png" alt="7" style="zoom:60%;"></p></li><li><p>结论</p><ul><li><p>尽管基本结构与传统程序很不同，CGF方法与随机测试相比较还是能有效最大化DNN程序的覆盖率</p></li><li><p>与传统软件的fuzzer优先选择最新生成的用例作为种子不同，DNN testing中种子选择的优先策略（多样性）也很重要</p></li><li><p>不同覆盖率标准提升的难易程度不同，KMNC, TKNC, 和 NC提升较容易。NBC and SNAC关注corner cases，本身初始seed覆盖率就极低，提升较难</p></li></ul></li></ul><h3 id="RQ3（错误检测）：现有的覆盖标准在引导错误检测的效果上有何不同？使用不同seed选取标准检测错误的效果有何不同？不同seed选取标准检测出的错误行为有何不同？"><a href="#RQ3（错误检测）：现有的覆盖标准在引导错误检测的效果上有何不同？使用不同seed选取标准检测错误的效果有何不同？不同seed选取标准检测出的错误行为有何不同？" class="headerlink" title="RQ3（错误检测）：现有的覆盖标准在引导错误检测的效果上有何不同？使用不同seed选取标准检测错误的效果有何不同？不同seed选取标准检测出的错误行为有何不同？"></a>RQ3（错误检测）：现有的覆盖标准在引导错误检测的效果上有何不同？使用不同seed选取标准检测错误的效果有何不同？不同seed选取标准检测出的错误行为有何不同？</h3><ul><li><p>实验结果</p><ul><li><p>检测错误数量</p><p><img src="/2020/08/20/DeepHunter/8.png" alt="8" style="zoom:60%;"></p><ul><li>DH+Prob和DH+UF检测错误数目多于另外三种策略，且模型较小时二者类似，模型较大时DF+Prob更优</li><li>KMNC在检测错误数目上少于其他4个覆盖率标准，因为cover更简单；但DH+Prob的表现还是优于其他策略</li><li>在最后的seed queue中，易于cover的覆盖率标准剩余的seed更多</li></ul></li><li><p>检测出的错误的多样性</p><p><img src="/2020/08/20/DeepHunter/9.png" alt="9" style="zoom:60%;"></p><ul><li>定义从同一个seed变换产生的错误属于同一类别，共1000类</li><li>DH+Prob和DH+UF能检测出更多类的错误，DeepTest和TensorFuzz检测出的错误甚至有的比RT还少，因为这二者都倾向于选择最新的seed</li><li>RT：过于随机，难以发现corner cases</li><li>选最新的seed：能发现Corner cases，但类别过于单一</li></ul></li></ul></li></ul><h3 id="RQ4（平台迁移）：DeepHunter是否适用于平台迁移过程中DNN量化引入的具体缺陷检测"><a href="#RQ4（平台迁移）：DeepHunter是否适用于平台迁移过程中DNN量化引入的具体缺陷检测" class="headerlink" title="RQ4（平台迁移）：DeepHunter是否适用于平台迁移过程中DNN量化引入的具体缺陷检测?"></a>RQ4（平台迁移）：DeepHunter是否适用于平台迁移过程中DNN量化引入的具体缺陷检测?</h3><ul><li><p>实验设计</p><ul><li><p>每个数据集选择一个模型，原模型都是32bit</p></li><li><p>3种量化方式</p><ul><li><p>随机选10%的权重缩减：32比特-&gt;16比特</p></li><li><p>随机选50%的权重缩减：32比特-&gt;16比特</p></li><li><p>所有权重缩减：32比特-&gt;16比特</p></li></ul></li><li><p>对前两种量化方式（10%和50%的量化模型）：sample10次得到10个模型，每个模型运行5遍取均值</p></li><li><p>为每个原始模型分配10小时生成图片，重复每种配置5次并平均结果</p></li></ul></li><li><p>实验结果</p><p><img src="/2020/08/20/DeepHunter/10.png" alt="10" style="zoom:60%;"></p><ul><li>corner相关的覆盖率标准更易发现量化错误</li><li>DNN模型越大，发现的错误越多</li><li>QR率越大，错误越多</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      
      <category domain="https://rubychen0611.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/">论文笔记</category>
      
      
      <category domain="https://rubychen0611.github.io/tags/DNN%E6%B5%8B%E8%AF%95/">DNN测试</category>
      
      <category domain="https://rubychen0611.github.io/tags/%E6%B5%8B%E8%AF%95%E8%BE%93%E5%85%A5%E7%94%9F%E6%88%90/">测试输入生成</category>
      
      <category domain="https://rubychen0611.github.io/tags/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95/">模糊测试</category>
      
      
      <comments>https://rubychen0611.github.io/2020/08/20/DeepHunter/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【论文笔记】DeepTest</title>
      <link>https://rubychen0611.github.io/2020/08/20/DeepTest/</link>
      <guid>https://rubychen0611.github.io/2020/08/20/DeepTest/</guid>
      <pubDate>Thu, 20 Aug 2020 08:56:17 GMT</pubDate>
      
      <description>&lt;p&gt;原文：DeepTest: Automated Testing of Deep-Neural-Network-driven Autonomous Cars  (ICSE’18)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>原文：DeepTest: Automated Testing of Deep-Neural-Network-driven Autonomous Cars  (ICSE’18)  <a id="more"></a></p><p>代码地址：<a href="https://github.com/ARiSE-Lab/deepTest">https://github.com/ARiSE-Lab/deepTest</a></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul><li><p>神经元覆盖率计算方式：卷积层与DeepXplore有所不同，<font color="red">输出特征图的平均值与激活阈值做比较</font></p></li><li><p>9种图像变换方式：</p><ul><li>线性变换：<ul><li>亮度：所有像素值加/减一个常数</li><li>对比度：所有像素值乘以一个常数</li></ul></li><li>仿射变换：平移、缩放、水平修剪、旋转 （模拟摄像头的移动）</li><li>卷积变换：<ul><li>模糊（4种：averaging, Gaussian, median, and bilateral）</li><li>雾雨（Adobe Photoshop）</li></ul></li></ul></li><li><p>覆盖率引导的贪心搜索变换叠加算法</p><p><img src="/2020/08/20/DeepTest/Fig1.png" alt="Fig1" style="zoom:75%;"></p><ul><li><p>蜕变关系约束</p><ul><li><p>对一张图片，蜕变后的预测角度$\theta_{ti}$与真实标记$θ_i$之间的差距应小于原始数据集平均MSE的λ倍</p><script type="math/tex; mode=display">(\theta_i-\theta_{ti}) \leq \lambda MSE_{orig}</script></li></ul></li></ul></li></ul><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="数据集及模型"><a href="#数据集及模型" class="headerlink" title="数据集及模型"></a>数据集及模型</h3><ul><li><p>数据集：Driving</p></li><li><p>模型：Udacity比赛排名第2、3、6的模型Rambo、Chauffeur、Epoch</p><p><img src="/2020/08/20/DeepTest/Fig2.png" alt="Fig2" style="zoom:80%;"></p></li></ul><h3 id="可控制参数或变量"><a href="#可控制参数或变量" class="headerlink" title="可控制参数或变量"></a>可控制参数或变量</h3><ul><li><p>maxFailedTries: 变换叠加时最大尝试次数</p></li><li><p>各变换参数及可选范围：</p><p><img src="/2020/08/20/DeepTest/Fig3.png" alt="Fig3" style="zoom:60%;"></p></li><li><p>$\lambda$: 控制蜕变关系约束</p></li><li><p>$\epsilon$：控制变换约束大小</p></li><li><p>神经元激活值</p></li></ul><h3 id="实验1：不同输入输出对是否覆盖不同神经元"><a href="#实验1：不同输入输出对是否覆盖不同神经元" class="headerlink" title="实验1：不同输入输出对是否覆盖不同神经元"></a>实验1：不同输入输出对是否覆盖不同神经元</h3><ul><li><p>实验方法：检查不同模型覆盖率与驾驶方向的Spearman相关性、覆盖率与驾驶角度的Wilcoxon非参数检验结果。（<font color="red">该实验设计是否合理？覆盖率增加，应对应的是输入或输出种类增加而非角度增大？？）</font></p></li><li><p>实验结果</p><ul><li>随着神经元覆盖率的增加，转向角度增加，反之亦然。即不同输出对应不同的神经元，神经元覆盖率可以很好地近似估计输入输出对的多样性。<font color="red">（相关系数结果并不明显？）</font></li><li>神经元覆盖率随导向方向的变化具有统计学意义($p&lt;2.2∗10^{−16}$时) ，有些子模型比其他子模型更负责改变方向。</li><li>总结：对于不同的输入输出对，神经元的覆盖范围很不同。因此，神经覆盖定向(NDG)测试策略可以帮助发现corner样本。</li></ul></li></ul><p><img src="/2020/08/20/DeepTest/Fig4.png" alt="Fig4" style="zoom:80%;"></p><h3 id="实验2：不同图像变换是否激活不同神经元"><a href="#实验2：不同图像变换是否激活不同神经元" class="headerlink" title="实验2：不同图像变换是否激活不同神经元"></a>实验2：不同图像变换是否激活不同神经元</h3><ul><li><p>实验2-1：从测试集随机选择1000张图片，对每张图片分别做7种变换（blur, brightness, contrast, rotation, scale, shear, and translation）以及尝试变换的多种参数，得到共70000张生成图片。在各个模型上运行这些图片，记录神经元激活情况。对任意两种变换的组合（如模糊vs旋转，旋转vs平移等等），设激活神经元集合分别为N1、N2，测量二者的差异大小（Jaccard距离）</p><ul><li>结果：（左图）：除了Chauffeur_LTSM模型之外，不同的变换激活的神经元有较大区别</li></ul></li><li><p>实验2-2：七种变换依次叠加在图片上，查看覆盖率提升情况</p><ul><li>结果（右图）：叠加每种变换后神经元覆盖率都增加了，<font color="red">说明每种变换都能激活不同神经元。（覆盖率提升是因为变换种类增多还是离原图距离越来越远？）</font></li></ul></li></ul><p><img src="/2020/08/20/DeepTest/Fig5.png" alt="Fig5" style="zoom:80%;"></p><ul><li><p>实验2-3：单个变换触发神经元的比例分布情况及平均神经元增加百分比情况</p><ul><li><p>结果：不同的图像变换以不同程度增加神经元的覆盖率。<font color="red">（下表的两行没看懂）</font></p><p><img src="/2020/08/20/DeepTest/Fig6.png" alt="Fig6" style="zoom:80%;"></p></li></ul></li></ul><h3 id="实验3：结合不同变换是否能进一步提升神经元覆盖率"><a href="#实验3：结合不同变换是否能进一步提升神经元覆盖率" class="headerlink" title="实验3：结合不同变换是否能进一步提升神经元覆盖率"></a>实验3：结合不同变换是否能进一步提升神经元覆盖率</h3><ul><li><p>实验方法：</p><ul><li>Baseline组：原始的100个种子输入</li><li>累积变换组：在100个种子输入上叠加7种变换的10种参数组合，得到7000张生成图片。</li><li>覆盖率引导的贪心搜索组：仅生成了254、221、864张图片（对应三个模型）</li></ul></li><li><p>实验结果：通过系统地结合不同的图像变换，神经元的覆盖率比原始种子图像的覆盖率提高了约100%。</p><p><img src="/2020/08/20/DeepTest/Fig7.png" alt="Fig7" style="zoom:80%;"></p></li></ul><h3 id="实验4：使用蜕变关系是否能检测到错误行为"><a href="#实验4：使用蜕变关系是否能检测到错误行为" class="headerlink" title="实验4：使用蜕变关系是否能检测到错误行为"></a>实验4：使用蜕变关系是否能检测到错误行为</h3><ul><li><p>实验4-1：生成图片与原图片和真实标记之间的偏差情况</p><p><img src="/2020/08/20/DeepTest/Fig8.png" alt="Fig8" style="zoom:60%;"></p><ul><li>结果：生成图片集合的MSE为0.41，原图片集合为0.035。因此生成的图片更有可能触发错误行为</li></ul></li><li><p>实验4-2：生成错误图片数量</p><ul><li><p>实验方法：</p><ul><li><p><strong>约束：为了防止图片变化过大或误报出现（如旋转后旋转角度应跟着变化），使用的变换（除了雾、雨）及其参数必须满足：</strong></p><p><script type="math/tex">|MSE(trans,param)-MSE_{org}|\leq \epsilon</script> （<font color="red">计算MSE用到了人工标记的oracle，在实际测试没有oracle时怎么办？</font>)</p></li></ul></li><li><p>实验结果：</p><ul><li><p>λ越大、$\epsilon$越小，错误数量越少（<font color="red">总生成图片数量没说？）</font></p><p><img src="/2020/08/20/DeepTest/Fig9.png" alt="Fig9" style="zoom:75%;"></p></li><li><p>对于某些转换，有些模型比其他模型更容易出现错误行为。（$\lambda=5，\epsilon=0.03$）</p><p><img src="/2020/08/20/DeepTest/Fig10.png" alt="Fig10" style="zoom:80%;"></p></li></ul></li></ul></li><li><p>实验4-3：人工检查误报情况</p><ul><li>结果：误报较少</li></ul></li></ul><h3 id="实验5：使用生成图片重新训练DNN能否提高准确率"><a href="#实验5：使用生成图片重新训练DNN能否提高准确率" class="headerlink" title="实验5：使用生成图片重新训练DNN能否提高准确率"></a>实验5：使用生成图片重新训练DNN能否提高准确率</h3><ul><li><p>实验方法：用HMB_3的图片生成雾、雨图片，其中66%和原训练集一起重新训练Epoch模型，剩下34%做测试。<font color="red">（用的转换太少了）</font></p></li><li><p>实验结果：MSE降低。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      
      <category domain="https://rubychen0611.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/">论文笔记</category>
      
      
      <category domain="https://rubychen0611.github.io/tags/DNN%E6%B5%8B%E8%AF%95/">DNN测试</category>
      
      <category domain="https://rubychen0611.github.io/tags/%E6%B5%8B%E8%AF%95%E8%BE%93%E5%85%A5%E7%94%9F%E6%88%90/">测试输入生成</category>
      
      <category domain="https://rubychen0611.github.io/tags/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95/">模糊测试</category>
      
      
      <comments>https://rubychen0611.github.io/2020/08/20/DeepTest/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【论文笔记】TensorFuzz</title>
      <link>https://rubychen0611.github.io/2020/08/20/TensorFuzz/</link>
      <guid>https://rubychen0611.github.io/2020/08/20/TensorFuzz/</guid>
      <pubDate>Thu, 20 Aug 2020 08:56:08 GMT</pubDate>
      
      <description>&lt;p&gt;原文：TensorFuzz: Debugging Neural Networks with Coverage-Guided Fuzzing （ICML’19)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>原文：TensorFuzz: Debugging Neural Networks with Coverage-Guided Fuzzing （ICML’19) <a id="more"></a></p><p>代码：<a href="https://github.com/brain-research/tensorfuzz">https://github.com/brain-research/tensorfuzz</a></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="CGF基本流程"><a href="#CGF基本流程" class="headerlink" title="CGF基本流程"></a>CGF基本流程</h3><p><img src="/2020/08/20/TensorFuzz/1.png" alt="1" style="zoom:60%;"></p><h3 id="方法细节"><a href="#方法细节" class="headerlink" title="方法细节"></a>方法细节</h3><ul><li><p>输入选择：选择更新鲜的输入</p></li><li><p>输入变换：①白噪声（参数由用户给出）；②增加$L_{\infty}$约束的白噪声</p></li><li><p>目标函数：用户根据覆盖率和元数据情况自定义</p></li><li><p>覆盖分析器：当我们得到一个新的激活向量时，我们可以查找它的最近邻居，然后检查这个最近的邻居在欧几里得距离中有多远，如果这个距离大于某个量，就向语料中添加输入。</p><ul><li>可只选择部分神经元的值作为激活向量，如只选logits或logits前一层</li></ul></li></ul><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="实验1：CGF可以高效地找到已训练神经网络的数值错误（导致NaN的错误）"><a href="#实验1：CGF可以高效地找到已训练神经网络的数值错误（导致NaN的错误）" class="headerlink" title="实验1：CGF可以高效地找到已训练神经网络的数值错误（导致NaN的错误）"></a>实验1：CGF可以高效地找到已训练神经网络的数值错误（导致NaN的错误）</h3><ul><li><p>实验方法：使将检查数值运算添加到元数据并运行模糊测试器（fuzzer）。我们训练了一个完全连接的神经网络来对MNIST数据集里的数字进行分类，故意用了一个很糟糕的交叉熵损失，这样就有可能出现数值误差。模型进行了35000步的训练，mini-batch size为100，验证精度为98%。检查MNIST数据集中不含导致数值误差的样本。</p></li><li><p>实验结果：TensorFuzz 却在10次随机初始化后快速找到了 NaN错误。</p><p><img src="/2020/08/20/TensorFuzz/2.jpg" alt="2" style="zoom:67%;"></p><ul><li>基于梯度的搜索技术可能无助于查找数值误差</li><li>随机搜索对于查找数值误差来说效率极低。</li></ul><h3 id="实验2：CGF-解决模型和量化版本不一致的问题"><a href="#实验2：CGF-解决模型和量化版本不一致的问题" class="headerlink" title="实验2：CGF 解决模型和量化版本不一致的问题"></a>实验2：CGF 解决模型和量化版本不一致的问题</h3><ul><li><p>仅检查已有的数据只能找到很少的错误：作为基线实验，我们训练了一个使用 32 位浮点数的 MNIST 分类器（这一次没有故意引入数值错误）。然后把所有权重和激活值修剪为 16 位。之后，我们对比了 32 位和 16 位模型在 MNIST 测试集上的预测，没有找到任何不一致性。</p></li><li><p>CGF 可以快速在数据周围的小区域中找到很多错误：然后运行 fuzzer，变化限制在种子图像周围的半径为 0.4 的无限范数球中，其中仅使用了 32 位模型作为覆盖的激活值。我们将输入限制在种子图像附近，因为这些输入几乎都有明确的类别语义。模型的两个版本在域外的垃圾数据（没有真实类别）上出现不一致性并没有什么意义。通过这些设置，fuzzer 可以生成 70% 样本的不一致性。因此，CGF 允许我们寻找在测试时出现的真实错误.</p></li></ul><h3 id="实验3：TensorFuzz可以发现流行模型实现中的bug"><a href="#实验3：TensorFuzz可以发现流行模型实现中的bug" class="headerlink" title="实验3：TensorFuzz可以发现流行模型实现中的bug"></a>实验3：TensorFuzz可以发现流行模型实现中的bug</h3><h3 id="实验4：TensorFuzz可以帮助进行保持语义的代码转换"><a href="#实验4：TensorFuzz可以帮助进行保持语义的代码转换" class="headerlink" title="实验4：TensorFuzz可以帮助进行保持语义的代码转换"></a>实验4：TensorFuzz可以帮助进行保持语义的代码转换</h3></li></ul><h2 id="可控制变量及参数总结"><a href="#可控制变量及参数总结" class="headerlink" title="可控制变量及参数总结"></a>可控制变量及参数总结</h2><ul><li><p>输入选择策略</p></li><li><p>变换参数</p></li><li><p>目标函数</p></li><li><p>激活神经元集合</p></li><li><p>距离阈值L</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      
      <category domain="https://rubychen0611.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/">论文笔记</category>
      
      
      <category domain="https://rubychen0611.github.io/tags/DNN%E6%B5%8B%E8%AF%95/">DNN测试</category>
      
      <category domain="https://rubychen0611.github.io/tags/%E6%B5%8B%E8%AF%95%E8%BE%93%E5%85%A5%E7%94%9F%E6%88%90/">测试输入生成</category>
      
      <category domain="https://rubychen0611.github.io/tags/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95/">模糊测试</category>
      
      
      <comments>https://rubychen0611.github.io/2020/08/20/TensorFuzz/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
